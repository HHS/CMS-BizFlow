SET DEFINE OFF;




--------------------------------------------------------
--  DDL for Function FN_GET_LOCATION_DSCR
--------------------------------------------------------

/**
 * Gets LOCATION descriptions.
 *
 * @param I_LOCATION_IDS - Selected item IDs, semicolon separated.
 *
 * @return NVARCHAR2 - Description of the selected items, comma separated.
 */
CREATE OR REPLACE FUNCTION FN_GET_LOCATION_DSCR
(
	I_LOCATION_IDS              IN      NVARCHAR2
)
RETURN NVARCHAR2
IS
	V_INPUT_VAL                 NVARCHAR2(3000);
	V_RETURN_VAL                NVARCHAR2(4000);
	V_SQL                       VARCHAR2(4000);
	V_IDX                       NUMBER(10);
	V_LOCATION_CNT              NUMBER(10);
	TYPE LOCATION_TYPE IS REF CURSOR;
	CUR_LOCATION                LOCATION_TYPE;
	REC_LOCATION                LOCATION%ROWTYPE;
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_LOCATION_DSCR -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_LOCATION_IDS = ' || I_LOCATION_IDS );

	-- input validation
	IF I_LOCATION_IDS IS NULL OR LENGTH(TRIM(I_LOCATION_IDS)) <= 0
	THEN
		RETURN NULL;
	ELSE
		-- prepare input value to be used in IN clause
		V_INPUT_VAL := TRIM(I_LOCATION_IDS);
		V_INPUT_VAL := REPLACE(V_INPUT_VAL, ',', ''',''');
		V_INPUT_VAL := CONCAT('''', V_INPUT_VAL);
		V_INPUT_VAL := CONCAT(V_INPUT_VAL, '''');
	END IF;

	V_RETURN_VAL := '';
	V_SQL := 'SELECT * FROM LOCATION WHERE LOC_ID IN (' || V_INPUT_VAL || ') ';
	--DBMS_OUTPUT.PUT_LINE('    V_SQL = ' || V_SQL );

	-- Loop through to look up description of each
	-- and concatenate descriptions delimitted by semicolon.
	--DBMS_OUTPUT.PUT_LINE('Before open cursor for LOCATION');
	OPEN CUR_LOCATION FOR V_SQL;
	--DBMS_OUTPUT.PUT_LINE('After open cursor for LOCATION');

	V_LOCATION_CNT := 0;
	LOOP
		FETCH CUR_LOCATION INTO REC_LOCATION;
		EXIT WHEN CUR_LOCATION%NOTFOUND;
		V_LOCATION_CNT := V_LOCATION_CNT + 1;
		V_RETURN_VAL := V_RETURN_VAL || REC_LOCATION.LOC_CITY || ', ' || REC_LOCATION.LOC_STATE || '; ';
		--DBMS_OUTPUT.PUT_LINE('Fetched record, loop count = ' || TO_CHAR(V_LOCATION_CNT) || ' V_RETURN_VAL = ' || V_RETURN_VAL);
	END LOOP;
	CLOSE CUR_LOCATION;

	-- clear trailing comma if exists
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
	THEN
		V_IDX := INSTR(V_RETURN_VAL, '; ', -1);
		IF V_IDX > 0 AND V_IDX = (LENGTH(V_RETURN_VAL) - 1)
		THEN
			V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 0, (LENGTH(V_RETURN_VAL) - 2));
		END IF;
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_LOCATION_DSCR -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_LOCATION_DSCR -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_MEMBER_DSCR
--------------------------------------------------------

/**
 * Gets member descriptions.
 *
 * @param I_MEMBERIDS - Selected Member IDs, comma separated.
 *
 * @return NVARCHAR2 - Names of the selected members, comma separated.
 */
CREATE OR REPLACE FUNCTION FN_GET_MEMBER_DSCR
(
	I_MEMBERIDS                 IN  VARCHAR2
)
RETURN NVARCHAR2
IS
	V_INPUT_VAL                 NVARCHAR2(1000);
	V_SQL                       VARCHAR2(4000);
	V_RETURN_VAL                NVARCHAR2(4000);

	V_IDX                       NUMBER(10);
	V_LOOP_CNT                  NUMBER(10);
	TYPE MEMBER_TYPE IS REF CURSOR;
	CUR_MEMBER                  MEMBER_TYPE;
	REC_MEMBER                  BIZFLOW.MEMBER%ROWTYPE;
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_MEMBER_DSCR -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_MEMBERIDS = ' || I_MEMBERIDS );

	-- input validation
	IF I_MEMBERIDS IS NULL OR LENGTH(TRIM(I_MEMBERIDS)) <= 0
	THEN
		RETURN NULL;
	END IF;

	V_INPUT_VAL := REPLACE(I_MEMBERIDS, ',', ''',''');
	V_INPUT_VAL := CONCAT('''', V_INPUT_VAL);
	V_INPUT_VAL := CONCAT(V_INPUT_VAL, '''');
	--DBMS_OUTPUT.PUT_LINE('    V_INPUT_VAL = ' || V_INPUT_VAL );

	V_SQL := 'SELECT * FROM BIZFLOW.MEMBER WHERE MEMBERID IN (' || V_INPUT_VAL || ') ';
	--DBMS_OUTPUT.PUT_LINE('    V_SQL = ' || V_SQL );

	-- Loop through to look up description of each
	-- and concatenate descriptions delimitted by comma.
	--DBMS_OUTPUT.PUT_LINE('Before open cursor for BIZFLOW.MEMBER');
	OPEN CUR_MEMBER FOR V_SQL;
	--DBMS_OUTPUT.PUT_LINE('After open cursor for BIZFLOW.MEMBER');

	V_LOOP_CNT := 0;
	LOOP
		FETCH CUR_MEMBER INTO REC_MEMBER;
		EXIT WHEN CUR_MEMBER%NOTFOUND;
		V_LOOP_CNT := V_LOOP_CNT + 1;
		V_RETURN_VAL := V_RETURN_VAL || REC_MEMBER.NAME || ', ';
		--DBMS_OUTPUT.PUT_LINE('Fetched record, loop count = ' || TO_CHAR(V_LOOP_CNT) || ' V_RETURN_VAL = ' || V_RETURN_VAL);
	END LOOP;
	CLOSE CUR_MEMBER;

	-- clear trailing comma if exists
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
	THEN
		V_IDX := INSTR(V_RETURN_VAL, ', ', -1);
		IF V_IDX > 0 AND V_IDX = (LENGTH(V_RETURN_VAL) - 1)
		THEN
			V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 0, (LENGTH(V_RETURN_VAL) - 2));
		END IF;
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_MEMBER_DSCR -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_MEMBER_DSCR -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_LOOKUP_DSCR
--------------------------------------------------------

/**
 * Gets LOOKUP descriptions.
 *
 * @param I_LOOKUP_IDS - Selected item IDs, comma separated.
 *
 * @return NVARCHAR2 - Description of the selected items, comma separated.
 */
CREATE OR REPLACE FUNCTION FN_GET_LOOKUP_DSCR
(
	I_LOOKUP_IDS                IN  VARCHAR2
)
RETURN NVARCHAR2
IS
	V_RETURN_VAL                NVARCHAR2(4000);
	V_SQL                       VARCHAR2(4000);

	V_IDX                       NUMBER(10);
	V_LOOP_CNT                  NUMBER(10);
	TYPE LOOKUP_TYPE IS REF CURSOR;
	CUR_LOOKUP                  LOOKUP_TYPE;
	REC_LOOKUP                  TBL_LOOKUP%ROWTYPE;
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_LOOKUP_DSCR -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_LOOKUP_IDS = ' || I_LOOKUP_IDS );

	-- input validation
	IF I_LOOKUP_IDS IS NULL OR LENGTH(TRIM(I_LOOKUP_IDS)) <= 0
	THEN
		RETURN NULL;
	END IF;

	V_RETURN_VAL := '';

	V_SQL := 'SELECT * FROM TBL_LOOKUP WHERE TBL_ID IN (' || I_LOOKUP_IDS || ') ';
	--DBMS_OUTPUT.PUT_LINE('    V_SQL = ' || V_SQL );

	-- Loop through to look up description of each
	-- and concatenate descriptions delimitted by comma.
	--DBMS_OUTPUT.PUT_LINE('Before open cursor for TBL_LOOKUP');
	OPEN CUR_LOOKUP FOR V_SQL;
	--DBMS_OUTPUT.PUT_LINE('After open cursor for TBL_LOOKUP');

	V_LOOP_CNT := 0;
	LOOP
		FETCH CUR_LOOKUP INTO REC_LOOKUP;
		EXIT WHEN CUR_LOOKUP%NOTFOUND;
		V_LOOP_CNT := V_LOOP_CNT + 1;
		V_RETURN_VAL := V_RETURN_VAL || REC_LOOKUP.TBL_LABEL || ', ';
		--DBMS_OUTPUT.PUT_LINE('Fetched record, loop count = ' || TO_CHAR(V_LOOP_CNT) || ' V_RETURN_VAL = ' || V_RETURN_VAL);
	END LOOP;
	CLOSE CUR_LOOKUP;

	-- clear trailing comma if exists
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
	THEN
		V_IDX := INSTR(V_RETURN_VAL, ', ', -1);
		IF V_IDX > 0 AND V_IDX = (LENGTH(V_RETURN_VAL) - 1)
		THEN
			V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 0, (LENGTH(V_RETURN_VAL) - 2));
		END IF;
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_LOOKUP_DSCR -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_LOOKUP_DSCR -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_GRADE_ADVRT
--------------------------------------------------------

/**
 * Gets Grade Advertized value.
 *
 * @param POS_GA_1 through 15 - Grade Advertized field values.
 *
 * @return NVARCHAR2 - Concatenated Grade Advertized values delimitted by semicolon.
 */
CREATE OR REPLACE FUNCTION FN_GET_GRADE_ADVRT
(
	I_POS_GA_1                 IN  VARCHAR2
	, I_POS_GA_2               IN  VARCHAR2
	, I_POS_GA_3               IN  VARCHAR2
	, I_POS_GA_4               IN  VARCHAR2
	, I_POS_GA_5               IN  VARCHAR2
	, I_POS_GA_6               IN  VARCHAR2
	, I_POS_GA_7               IN  VARCHAR2
	, I_POS_GA_8               IN  VARCHAR2
	, I_POS_GA_9               IN  VARCHAR2
	, I_POS_GA_10              IN  VARCHAR2
	, I_POS_GA_11              IN  VARCHAR2
	, I_POS_GA_12              IN  VARCHAR2
	, I_POS_GA_13              IN  VARCHAR2
	, I_POS_GA_14              IN  VARCHAR2
	, I_POS_GA_15              IN  VARCHAR2
)
RETURN NVARCHAR2
IS
	V_RETURN_VAL                NVARCHAR2(100);
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_GRADE_ADVRT -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_1  = ' || I_POS_GA_1 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_2  = ' || I_POS_GA_2 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_3  = ' || I_POS_GA_3 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_4  = ' || I_POS_GA_4 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_5  = ' || I_POS_GA_5 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_6  = ' || I_POS_GA_6 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_7  = ' || I_POS_GA_7 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_8  = ' || I_POS_GA_8 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_9  = ' || I_POS_GA_9 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_10 = ' || I_POS_GA_10 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_11 = ' || I_POS_GA_11 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_12 = ' || I_POS_GA_12 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_13 = ' || I_POS_GA_13 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_14 = ' || I_POS_GA_14 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_15 = ' || I_POS_GA_15 );

	V_RETURN_VAL :=
		CASE WHEN I_POS_GA_1  = '1'    THEN '01; ' ELSE '' END
		|| CASE WHEN I_POS_GA_2  = '1' THEN '02; ' ELSE '' END
		|| CASE WHEN I_POS_GA_3  = '1' THEN '03; ' ELSE '' END
		|| CASE WHEN I_POS_GA_4  = '1' THEN '04; ' ELSE '' END
		|| CASE WHEN I_POS_GA_5  = '1' THEN '05; ' ELSE '' END
		|| CASE WHEN I_POS_GA_6  = '1' THEN '06; ' ELSE '' END
		|| CASE WHEN I_POS_GA_7  = '1' THEN '07; ' ELSE '' END
		|| CASE WHEN I_POS_GA_8  = '1' THEN '08; ' ELSE '' END
		|| CASE WHEN I_POS_GA_9  = '1' THEN '09; ' ELSE '' END
		|| CASE WHEN I_POS_GA_10 = '1' THEN '10; ' ELSE '' END
		|| CASE WHEN I_POS_GA_11 = '1' THEN '11; ' ELSE '' END
		|| CASE WHEN I_POS_GA_12 = '1' THEN '12; ' ELSE '' END
		|| CASE WHEN I_POS_GA_13 = '1' THEN '13; ' ELSE '' END
		|| CASE WHEN I_POS_GA_14 = '1' THEN '14; ' ELSE '' END
		|| CASE WHEN I_POS_GA_15 = '1' THEN '15; ' ELSE '' END
	;
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
		AND SUBSTR(V_RETURN_VAL, (LENGTH(V_RETURN_VAL) - 1)) = '; '
	THEN
		V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 1, (LENGTH(V_RETURN_VAL) - 2));
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_GRADE_ADVRT -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_GRADE_ADVRT -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_ANNOUNCE_NOT_REQ
--------------------------------------------------------

/**
 * Gets Areas of Consideration - Announcement Not Required section data.
 *
 * @param I_AOC_30PCT_DISABLED_VETS - 30% or More Disabled Veterans
 * @param I_AOC_EXPERT_CONS - Expert/Consultant
 * @param I_AOC_IPA - Intergovernmental Personnel Act (IPA)
 * @param I_AOC_OPER_WARFIGHTER - Operation Warfighter Program
 * @param I_AOC_DISABILITIES - Schedule A (for persons with disabilities)
 * @param I_AOC_STUDENT_VOL - Student Volunteer Program
 * @param I_AOC_VETS_RECRUIT_APPT - Veterans Recruitment Appointment
 * @param I_AOC_VOC_REHAB_EMPL - Voc. Rehab & Employment Program
 * @param I_AOC_WORKFORCE_RECRUIT - Workforce Recruitment Program
 *
 * @return NVARCHAR2 - Concatenated Announcement Not Required section values delimitted by semicolon.
 */
CREATE OR REPLACE FUNCTION FN_GET_ANNOUNCE_NOT_REQ
(
	I_AOC_30PCT_DISABLED_VETS      IN  VARCHAR2
	, I_AOC_EXPERT_CONS            IN  VARCHAR2
	, I_AOC_IPA                    IN  VARCHAR2
	, I_AOC_OPER_WARFIGHTER        IN  VARCHAR2
	, I_AOC_DISABILITIES           IN  VARCHAR2
	, I_AOC_STUDENT_VOL            IN  VARCHAR2
	, I_AOC_VETS_RECRUIT_APPT      IN  VARCHAR2
	, I_AOC_VOC_REHAB_EMPL         IN  VARCHAR2
	, I_AOC_WORKFORCE_RECRUIT      IN  VARCHAR2
)
RETURN NVARCHAR2
IS
	V_RETURN_VAL                NVARCHAR2(500);
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_ANNOUNCE_NOT_REQ -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_30PCT_DISABLED_VETS  = ' || I_AOC_30PCT_DISABLED_VETS );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_EXPERT_CONS          = ' || I_AOC_EXPERT_CONS );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_IPA                  = ' || I_AOC_IPA );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_OPER_WARFIGHTER      = ' || I_AOC_OPER_WARFIGHTER );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_DISABILITIES         = ' || I_AOC_DISABILITIES );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_STUDENT_VOL          = ' || I_AOC_STUDENT_VOL );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_VETS_RECRUIT_APPT    = ' || I_AOC_VETS_RECRUIT_APPT );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_VOC_REHAB_EMPL       = ' || I_AOC_VOC_REHAB_EMPL );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_WORKFORCE_RECRUIT    = ' || I_AOC_WORKFORCE_RECRUIT );

	V_RETURN_VAL :=
		CASE WHEN I_AOC_30PCT_DISABLED_VETS = '1'     THEN '30% or More Disabled Veterans; ' ELSE '' END
		|| CASE WHEN I_AOC_EXPERT_CONS = '1'          THEN 'Expert/Consultant; ' ELSE '' END
		|| CASE WHEN I_AOC_IPA = '1'                  THEN 'Intergovernmental Personnel Act (IPA); ' ELSE '' END
		|| CASE WHEN I_AOC_OPER_WARFIGHTER = '1'      THEN 'Operation Warfighter Program; ' ELSE '' END
		|| CASE WHEN I_AOC_DISABILITIES = '1'         THEN 'Schedule A (for persons with disabilities); ' ELSE '' END
		|| CASE WHEN I_AOC_STUDENT_VOL = '1'          THEN 'Student Volunteer Program; ' ELSE '' END
		|| CASE WHEN I_AOC_VETS_RECRUIT_APPT = '1'    THEN 'Veterans Recruitment Appointment; ' ELSE '' END
		|| CASE WHEN I_AOC_VOC_REHAB_EMPL = '1'       THEN 'Voc. Rehab & Employment Program; ' ELSE '' END
		|| CASE WHEN I_AOC_WORKFORCE_RECRUIT = '1'    THEN 'Workforce Recruitment Program; ' ELSE '' END
	;
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
		AND SUBSTR(V_RETURN_VAL, (LENGTH(V_RETURN_VAL) - 1)) = '; '
	THEN
		V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 1, (LENGTH(V_RETURN_VAL) - 2));
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_ANNOUNCE_NOT_REQ -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_ANNOUNCE_NOT_REQ -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_ANNOUNCE_REQ
--------------------------------------------------------

/**
 * Gets Areas of Consideration - Announcement Required section data.
 *
 * @param I_AOC_MIL_SPOUSES - Certain Military Spouses
 * @param I_AOC_DIRECT_HIRE - Direct Hire
 * @param I_AOC_RE_EMPLOYMENT - Reemployed Annuitant
 * @param I_AOC_PATHWAYS - Pathways Program (Intern, PMF, RG)
 * @param I_AOC_PEACE_CORPS_VOL - Peace Corps/Volunteers
 * @param I_AOC_REINSTATEMENT - Reinstatement
 * @param I_AOC_SHARED_CERT - Shared Certificate
 *
 * @return NVARCHAR2 - Concatenated Announcement Required section values delimitted by semicolon.
 */
CREATE OR REPLACE FUNCTION FN_GET_ANNOUNCE_REQ
(
	I_AOC_MIL_SPOUSES          IN  VARCHAR2
	, I_AOC_DIRECT_HIRE        IN  VARCHAR2
	, I_AOC_RE_EMPLOYMENT      IN  VARCHAR2
	, I_AOC_PATHWAYS           IN  VARCHAR2
	, I_AOC_PEACE_CORPS_VOL    IN  VARCHAR2
	, I_AOC_REINSTATEMENT      IN  VARCHAR2
	, I_AOC_SHARED_CERT        IN  VARCHAR2
)
RETURN NVARCHAR2
IS
	V_RETURN_VAL                NVARCHAR2(500);
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_ANNOUNCE_REQ -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_MIL_SPOUSES      = ' || I_AOC_MIL_SPOUSES );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_DIRECT_HIRE      = ' || I_AOC_DIRECT_HIRE );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_RE_EMPLOYMENT    = ' || I_AOC_RE_EMPLOYMENT );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_PATHWAYS         = ' || I_AOC_PATHWAYS );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_PEACE_CORPS_VOL  = ' || I_AOC_PEACE_CORPS_VOL );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_REINSTATEMENT    = ' || I_AOC_REINSTATEMENT );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_SHARED_CERT      = ' || I_AOC_SHARED_CERT );

	V_RETURN_VAL :=
		CASE WHEN I_AOC_MIL_SPOUSES = '1'           THEN 'Certain Military Spouses; ' ELSE '' END
		|| CASE WHEN I_AOC_DIRECT_HIRE = '1'        THEN 'Direct Hire; ' ELSE '' END
		|| CASE WHEN I_AOC_RE_EMPLOYMENT = '1'      THEN 'Reemployed Annuitant; ' ELSE '' END
		|| CASE WHEN I_AOC_PATHWAYS = '1'           THEN 'Pathways Program (Intern, PMF, RG); ' ELSE '' END
		|| CASE WHEN I_AOC_PEACE_CORPS_VOL = '1'    THEN 'Peace Corps/Volunteers; ' ELSE '' END
		|| CASE WHEN I_AOC_REINSTATEMENT = '1'      THEN 'Reinstatement; ' ELSE '' END
		|| CASE WHEN I_AOC_SHARED_CERT = '1'        THEN 'Shared Certificate; ' ELSE '' END
	;
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
		AND SUBSTR(V_RETURN_VAL, (LENGTH(V_RETURN_VAL) - 1)) = '; '
	THEN
		V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 1, (LENGTH(V_RETURN_VAL) - 2));
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_ANNOUNCE_REQ -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_ANNOUNCE_REQ -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_ANNOUNCE_TYPE
--------------------------------------------------------

/**
 * Gets Areas of Consideration - Announcement Type section data.
 *
 * @param I_AOC_DELEGATE_EXAM - Delegated Examining (DE) - All U.S. citizens
 * @param I_AOC_DH_US_CITIZENS - Direct Hire - All U.S. citizens
 * @param I_AOC_MP_GOV_WIDE - MP Government-wide
 * @param I_AOC_MP_HHS_ONLY - MP HHS-wide ONLY
 * @param I_AOC_MP_CMS_ONLY - MP CMS-wide ONLY
 * @param I_AOC_MP_COMP_CONS_ONLY - MP Component/Consortium-wide ONLY
 * @param I_AOC_MP_I_CTAP_VEGA - ICTAP and VEOA Only
 *
 * @return NVARCHAR2 - Concatenated Announcement Type section values delimitted by semicolon.
 */
CREATE OR REPLACE FUNCTION FN_GET_ANNOUNCE_TYPE
(
	I_AOC_DELEGATE_EXAM            IN  VARCHAR2
	, I_AOC_DH_US_CITIZENS         IN  VARCHAR2
	, I_AOC_MP_GOV_WIDE            IN  VARCHAR2
	, I_AOC_MP_HHS_ONLY            IN  VARCHAR2
	, I_AOC_MP_CMS_ONLY            IN  VARCHAR2
	, I_AOC_MP_COMP_CONS_ONLY      IN  VARCHAR2
	, I_AOC_MP_I_CTAP_VEGA         IN  VARCHAR2
)
RETURN NVARCHAR2
IS
	V_RETURN_VAL                NVARCHAR2(500);
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_ANNOUNCE_TYPE -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_DELEGATE_EXAM      = ' || I_AOC_DELEGATE_EXAM );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_DH_US_CITIZENS     = ' || I_AOC_DH_US_CITIZENS );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_MP_GOV_WIDE        = ' || I_AOC_MP_GOV_WIDE );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_MP_HHS_ONLY        = ' || I_AOC_MP_HHS_ONLY );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_MP_CMS_ONLY        = ' || I_AOC_MP_CMS_ONLY );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_MP_COMP_CONS_ONLY  = ' || I_AOC_MP_COMP_CONS_ONLY );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_MP_I_CTAP_VEGA     = ' || I_AOC_MP_I_CTAP_VEGA );

	V_RETURN_VAL :=
		CASE WHEN I_AOC_DELEGATE_EXAM = '1'        THEN 'Delegated Examining (DE) - All U.S. citizens; ' ELSE '' END
		|| CASE WHEN I_AOC_DH_US_CITIZENS = '1'    THEN 'Direct Hire - All U.S. citizens; ' ELSE '' END
		|| CASE WHEN I_AOC_MP_GOV_WIDE = '1'       THEN 'MP Government-wide; ' ELSE '' END
		|| CASE WHEN I_AOC_MP_HHS_ONLY = '1'       THEN 'MP HHS-wide ONLY; ' ELSE '' END
		|| CASE WHEN I_AOC_MP_CMS_ONLY = '1'       THEN 'MP CMS-wide ONLY; ' ELSE '' END
		|| CASE WHEN I_AOC_MP_COMP_CONS_ONLY = '1' THEN 'MP Component/Consortium-wide ONLY; ' ELSE '' END
		|| CASE WHEN I_AOC_MP_I_CTAP_VEGA = '1'    THEN 'ICTAP and VEOA Only; ' ELSE '' END
	;
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
		AND SUBSTR(V_RETURN_VAL, (LENGTH(V_RETURN_VAL) - 1)) = '; '
	THEN
		V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 1, (LENGTH(V_RETURN_VAL) - 2));
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_ANNOUNCE_TYPE -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_ANNOUNCE_TYPE -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_ASSESS_TYPE
--------------------------------------------------------

/**
 * Gets Job Analysis - Assessement Type section data.
 *
 * @param I_JA_TYPE_YES_NO - Yes/No (True/False)
 * @param I_JA_TYPE_REQ_DEFAULT - Default scale
 * @param I_JA_TYPE_KNOWL_SCALE - Knowledge scale
 *
 * @return NVARCHAR2 - Concatenated Assessement Type section values delimitted by semicolon.
 */
CREATE OR REPLACE FUNCTION FN_GET_ASSESS_TYPE
(
	I_JA_TYPE_YES_NO           IN  VARCHAR2
	, I_JA_TYPE_REQ_DEFAULT    IN  VARCHAR2
	, I_JA_TYPE_KNOWL_SCALE    IN  VARCHAR2
)
RETURN NVARCHAR2
IS
	V_RETURN_VAL                NVARCHAR2(100);
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_ASSESS_TYPE -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_JA_TYPE_YES_NO         = ' || I_JA_TYPE_YES_NO );
	--DBMS_OUTPUT.PUT_LINE('    I_JA_TYPE_REQ_DEFAULT    = ' || I_JA_TYPE_REQ_DEFAULT );
	--DBMS_OUTPUT.PUT_LINE('    I_JA_TYPE_KNOWL_SCALE    = ' || I_JA_TYPE_KNOWL_SCALE );

	V_RETURN_VAL :=
		CASE WHEN I_JA_TYPE_YES_NO = '1'          THEN 'Yes/No (True/False); ' ELSE '' END
		|| CASE WHEN I_JA_TYPE_REQ_DEFAULT = '1'  THEN 'Default scale; ' ELSE '' END
		|| CASE WHEN I_JA_TYPE_KNOWL_SCALE = '1'  THEN 'Knowledge scale; ' ELSE '' END
	;
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
		AND SUBSTR(V_RETURN_VAL, (LENGTH(V_RETURN_VAL) - 1)) = '; '
	THEN
		V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 1, (LENGTH(V_RETURN_VAL) - 2));
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_ASSESS_TYPE -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_ASSESS_TYPE -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_SUBORG_CD
--------------------------------------------------------

/**
 * Gets Admin Code to map to Sub-Organization.
 *
 * Sub Organization 1 - Use the first charactor of Admin Code.
 * Sub Organization 2 - Use the leading 3 charactors of Admin Code.
 *                      If the leading 3 characters is 'FCM' and the full Admin Code is not 'FCM2',
 *                      use the leading 4 characters.
 * Sub Organization 3 - Use one more charactor of Admin Code than Sub Organization 2 if its length does not exceed the full Admin Code length.
 * Sub Organization 4 - Use one more charactor of Admin Code than Sub Organization 3 if its length does not exceed the full Admin Code length.
 * Sub Organization 5 - Use one more charactor of Admin Code than Sub Organization 4 if its length does not exceed the full Admin Code length.
 *
 * @param I_ADMIN_CD - The full Admin Code value to evaluate.
 * @param I_SUB_ORG_LVL - Sub-Organization Level
 *
 * @return VARCHAR2 - The Admin Code to map to Sub-Organization.
 *                  If there is no matching Sub-Organization for the given level, return NULL.
 */
CREATE OR REPLACE FUNCTION FN_GET_SUBORG_CD
(
	I_ADMIN_CD              IN  VARCHAR2
	, I_SUB_ORG_LVL         IN  NUMBER
)
RETURN VARCHAR2
IS
	V_RETURN_VAL                VARCHAR2(10);
	V_FULL_LENGTH               NUMBER(1);
	V_OFFSET                    NUMBER(1);
	V_IS_SHIFTED                CHAR(1);
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_SUBORG_CD -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_ADMIN_CD         = ' || I_ADMIN_CD );
	--DBMS_OUTPUT.PUT_LINE('    I_SUB_ORG_LVL      = ' || I_SUB_ORG_LVL );
	V_FULL_LENGTH := LENGTH(I_ADMIN_CD);
	V_OFFSET := 3;
	V_IS_SHIFTED := CASE WHEN SUBSTR(I_ADMIN_CD, 1, 3) = 'FCM' AND I_ADMIN_CD != 'FCM2' THEN 'Y' ELSE 'N' END;
	IF I_SUB_ORG_LVL = 1 THEN
		IF V_FULL_LENGTH >= 1 THEN
			V_OFFSET := 1;
		ELSE
			V_OFFSET := 0;
		END IF;
	ELSE
		IF V_IS_SHIFTED = 'N' THEN
			--IF I_SUB_ORG_LVL = 2 AND V_FULL_LENGTH >= 3 THEN
			IF I_SUB_ORG_LVL = 2 THEN
				V_OFFSET := 3;
			ELSIF I_SUB_ORG_LVL = 3 AND V_FULL_LENGTH >= 4 THEN
				V_OFFSET := 4;
			ELSIF I_SUB_ORG_LVL = 4 AND V_FULL_LENGTH >= 5 THEN
				V_OFFSET := 5;
			ELSIF I_SUB_ORG_LVL = 5 AND V_FULL_LENGTH >= 6 THEN
				V_OFFSET := 6;
			ELSE
				V_OFFSET := 0;
			END IF;
		ELSE
			--IF I_SUB_ORG_LVL = 2 AND V_FULL_LENGTH >= 4 THEN
			IF I_SUB_ORG_LVL = 2 THEN
				V_OFFSET := 4;
			ELSIF I_SUB_ORG_LVL = 3 AND V_FULL_LENGTH >= 5 THEN
				V_OFFSET := 5;
			ELSIF I_SUB_ORG_LVL = 4 AND V_FULL_LENGTH >= 6 THEN
				V_OFFSET := 6;
			ELSIF I_SUB_ORG_LVL = 5 AND V_FULL_LENGTH >= 7 THEN
				V_OFFSET := 7;
			ELSE
				V_OFFSET := 0;
			END IF;
		END IF;
	END IF;

	V_RETURN_VAL := SUBSTR(I_ADMIN_CD, 1, V_OFFSET);

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_SUBORG_CD -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_SUBORG_CD -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/

--------------------------------------------------------
--  DDL for Function FN_GET_NAMES
--------------------------------------------------------

/**
 * Get names from three member IDs
 *
 *
 * @param I_IDS - Three member IDs with comma delimiter 
 *
 * @return NVARCHAR2 - Names for the input IDs with semi-colon delimiter
 */
create or replace FUNCTION FN_GET_NAMES
(
	I_IDS              IN  NVARCHAR2	
)
RETURN NVARCHAR2
IS
	V_RETURN_VAL	NVARCHAR2(600);
	V_VALUE1	NVARCHAR2(10);
	V_VALUE2	NVARCHAR2(10);
	V_VALUE3	NVARCHAR2(10);
	V_NAME1		NVARCHAR2(200);
	V_NAME2		NVARCHAR2(200);
	V_NAME3		NVARCHAR2(200);

BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_NAMES -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_IDS         = ' || I_IDS );
	IF I_IDS IS NOT NULL THEN
		SELECT REGEXP_SUBSTR (I_IDS, '[^,]+', 1, 1) INTO V_VALUE1 FROM DUAL;
		SELECT REGEXP_SUBSTR (I_IDS, '[^,]+', 1, 2) INTO V_VALUE2 FROM DUAL;
		SELECT REGEXP_SUBSTR (I_IDS, '[^,]+', 1, 3) INTO V_VALUE3 FROM DUAL;
	END IF;

	IF V_VALUE1 IS NOT NULL THEN
		SELECT M.NAME INTO V_NAME1 FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = V_VALUE1 AND ROWNUM = 1;
		V_RETURN_VAL := V_NAME1;
	END IF;

	IF V_VALUE2 IS NOT NULL THEN
		SELECT M.NAME INTO V_NAME2 FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = V_VALUE2 AND ROWNUM = 1;
		V_RETURN_VAL := V_RETURN_VAL || ';' || V_NAME2;
	END IF;

	IF V_VALUE3 IS NOT NULL THEN
		SELECT M.NAME INTO V_NAME3 FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = V_VALUE3 AND ROWNUM = 1;
		V_RETURN_VAL := V_RETURN_VAL || ';' || V_NAME3;
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_NAMES -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_SUBORG_CD -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/



SET DEFINE OFF;

--------------------------------------------------------
--  DDL for VW_STRATCON
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_STRATCON
AS
SELECT
	R.REQ_ID
	, R.REQ_JOB_REQ_NUMBER
	, R.REQ_JOB_REQ_CREATE_DT
	, R.REQ_STATUS_ID
	, R.REQ_CANCEL_DT
	, R.REQ_CANCEL_REASON

	, SG.SG_PROCID
	, SG.SG_AC_ID
	--, LU_AC.AC_ADMIN_CD AS SG_AC_CD
	--, LU_AC.AC_ADMIN_CD_DESCR AS SG_AC_DSCR
	, SG.SG_ADMIN_CD AS SG_ADMIN_CD
	--, LU_AC.AC_ADMIN_CD_DESCR AS SG_ADMIN_CD_DSCR
	--, LU_SO_1.AC_ADMIN_CD AS SUB_ORG_1_CD
	--, LU_SO_1.AC_ADMIN_CD_DESCR AS SUB_ORG_1_DSCR
	--, LU_SO_2.AC_ADMIN_CD AS SUB_ORG_2_CD
	--, LU_SO_2.AC_ADMIN_CD_DESCR AS SUB_ORG_2_DSCR
	--, LU_SO_3.AC_ADMIN_CD AS SUB_ORG_3_CD
	--, LU_SO_3.AC_ADMIN_CD_DESCR AS SUB_ORG_3_DSCR
	--, LU_SO_4.AC_ADMIN_CD AS SUB_ORG_4_CD
	--, LU_SO_4.AC_ADMIN_CD_DESCR AS SUB_ORG_4_DSCR
	--, LU_SO_5.AC_ADMIN_CD AS SUB_ORG_5_CD
	--, LU_SO_5.AC_ADMIN_CD_DESCR AS SUB_ORG_5_DSCR
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = SG.SG_ADMIN_CD AND ROWNUM = 1) AS SG_ADMIN_CD_DSCR
	, FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 1) AS SUB_ORG_1_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 1) AND ROWNUM = 1) AS SUB_ORG_1_DSCR
	, FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 2) AS SUB_ORG_2_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 2) AND ROWNUM = 1) AS SUB_ORG_2_DSCR
	, FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 3) AS SUB_ORG_3_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 3) AND ROWNUM = 1) AS SUB_ORG_3_DSCR
	, FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 4) AS SUB_ORG_4_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 4) AND ROWNUM = 1) AS SUB_ORG_4_DSCR
	, FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 5) AS SUB_ORG_5_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 5) AND ROWNUM = 1) AS SUB_ORG_5_DSCR
	, SG.SG_RT_ID
	--, LU_RT.TBL_LABEL AS SG_RT_DSCR
	, (SELECT LU_RT.TBL_LABEL FROM TBL_LOOKUP LU_RT WHERE LU_RT.TBL_ID = SG.SG_RT_ID AND ROWNUM = 1) AS SG_RT_DSCR
	, SG.SG_CT_ID
	--, LU_CT.TBL_LABEL AS SG_CT_DSCR
	, (SELECT LU_CT.TBL_LABEL FROM TBL_LOOKUP LU_CT WHERE LU_CT.TBL_ID = SG.SG_CT_ID AND ROWNUM = 1) AS SG_CT_DSCR
	, SG.SG_AT_ID
	--, LU_AT.TBL_LABEL AS SG_AT_DSCR
	, (SELECT LU_AT.TBL_LABEL FROM TBL_LOOKUP LU_AT WHERE LU_AT.TBL_ID = SG.SG_AT_ID AND ROWNUM = 1) AS SG_AT_DSCR
	, SG.SG_VT_ID
	--, LU_VT.TBL_LABEL AS SG_VT_DSCR
	, (SELECT LU_VT.TBL_LABEL FROM TBL_LOOKUP LU_VT WHERE LU_VT.TBL_ID = SG.SG_VT_ID AND ROWNUM = 1) AS SG_VT_DSCR
	, SG.SG_SAT_ID
	--, LU_SAT.TBL_LABEL AS SG_SAT_DSCR
	, (SELECT LU_SAT.TBL_LABEL FROM TBL_LOOKUP LU_SAT WHERE LU_SAT.TBL_ID = SG.SG_SAT_ID AND ROWNUM = 1) AS SG_SAT_DSCR
	, SG.SG_SO_ID
	--, LU_MEMSO.NAME AS SG_SO_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = SG.SG_SO_ID AND ROWNUM = 1)  AS SG_SO_NAME
	, SG.SG_SO_TITLE
	, SG.SG_SO_ORG
	, SG.SG_XO_ID
	--, LU_MEMXO.NAME AS SG_XO_NAME
	, FN_GET_NAMES(SG.SG_XO_ID)	AS SG_XO_NAME
	, SG.SG_XO_TITLE
	, SG.SG_XO_ORG
	, SG.SG_HRL_ID
	--, LU_MEMHL.NAME AS SG_HL_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = SG.SG_HRL_ID AND ROWNUM = 1)  AS SG_HL_NAME
	, SG.SG_HRL_TITLE
	, SG.SG_HRL_ORG
	, SG.SG_SS_ID
	--, LU_MEMSS.NAME AS SG_SS_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = SG.SG_SS_ID AND ROWNUM = 1)  AS SG_SS_NAME
	, SG.SG_CS_ID
	--, LU_MEMCS.NAME AS SG_CS_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = SG.SG_CS_ID AND ROWNUM = 1)  AS SG_CS_NAME
	, CASE WHEN SG.SG_SO_AGREE = '1' THEN 'Yes' ELSE 'No' END AS SG_SO_AGREE
	, SG.SG_OTHER_CERT
	, FN_GET_MEMBER_DSCR(SG.SG_OTHER_CERT) AS SG_OTHER_CERT_DSCR

	, POS.POS_CNDT_LAST_NM
	, POS.POS_CNDT_FIRST_NM
	, POS.POS_CNDT_MIDDLE_NM
	, CASE WHEN POS.POS_BGT_APR_OFM = '1' THEN 'Yes' WHEN POS.POS_BGT_APR_OFM = '0' THEN 'No' ELSE 'N/A' END AS POS_BGT_APR_OFM
	, POS.POS_SPNSR_ORG_NM
	, POS.POS_SPNSR_ORG_FUND_PC
	, POS.POS_TITLE
	, POS.POS_PAY_PLAN_ID
	--, LU_PYPL.TBL_NAME AS POS_PAY_PLAN_DSCR
	, (SELECT LU_PYPL.TBL_NAME FROM TBL_LOOKUP LU_PYPL WHERE LU_PYPL.TBL_ID = POS.POS_PAY_PLAN_ID AND ROWNUM = 1) AS POS_PAY_PLAN_DSCR
	, POS.POS_SERIES
	, POS.POS_DESC_NUMBER_1
	, POS.POS_CLASSIFICATION_DT_1
	, POS.POS_GRADE_1
	, POS.POS_DESC_NUMBER_2
	, POS.POS_CLASSIFICATION_DT_2
	, POS.POS_GRADE_2
	, POS.POS_DESC_NUMBER_3
	, POS.POS_CLASSIFICATION_DT_3
	, POS.POS_GRADE_3
	, POS.POS_DESC_NUMBER_4
	, POS.POS_CLASSIFICATION_DT_4
	, POS.POS_GRADE_4
	, POS.POS_DESC_NUMBER_5
	, POS.POS_CLASSIFICATION_DT_5
	, POS.POS_GRADE_5
	, POS.POS_MED_OFFICERS_ID
	--, LU_MO.TBL_LABEL AS POS_MED_OFFICERS_DSCR
	, (SELECT LU_MO.TBL_LABEL FROM TBL_LOOKUP LU_MO WHERE LU_MO.TBL_ID = POS.POS_MED_OFFICERS_ID AND ROWNUM = 1) AS POS_MED_OFFICERS_DSCR
	, POS.POS_PERFORMANCE_LEVEL
	, POS.POS_SUPERVISORY
	--, LU_SUP.TBL_LABEL AS POS_SUPERVISORY_DSCR
	, (SELECT LU_SUP.TBL_LABEL FROM TBL_LOOKUP LU_SUP WHERE LU_SUP.TBL_ID = TO_NUMBER(POS.POS_SUPERVISORY) AND ROWNUM = 1) AS POS_SUPERVISORY_DSCR
	, POS.POS_SKILL
	, POS.POS_LOCATION
	--, LU_LOC.LOC_CITY || ', ' || LU_LOC.LOC_STATE AS POS_LOCATION_DSCR
	, FN_GET_LOCATION_DSCR(POS.POS_LOCATION) AS POS_LOCATION_DSCR
	, POS.POS_VACANCIES
	, POS.POS_REPORT_SUPERVISOR
	--, LU_MEMRS.NAME AS POS_REPORT_SUPERVISOR_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = POS.POS_REPORT_SUPERVISOR AND ROWNUM = 1)  AS POS_REPORT_SUPERVISOR_NAME
	, POS.POS_CAN
	, CASE WHEN POS.POS_VICE = '1' THEN 'Yes' ELSE 'No' END AS POS_VICE
	, POS.POS_VICE_NAME
	, POS.POS_DAYS_ADVERTISED
	, POS.POS_AT_ID
	--, LU_ADT.TBL_LABEL AS POS_AT_DSCR
	, (SELECT LU_ADT.TBL_LABEL FROM TBL_LOOKUP LU_ADT WHERE LU_ADT.TBL_ID = POS.POS_AT_ID AND ROWNUM = 1) AS POS_AT_DSCR
	, POS.POS_NTE
	, POS.POS_WORK_SCHED_ID
	--, LU_WSCHD.TBL_LABEL AS POS_WORK_SCHED_DSCR
	, (SELECT LU_WSCHD.TBL_LABEL FROM TBL_LOOKUP LU_WSCHD WHERE LU_WSCHD.TBL_ID = POS.POS_WORK_SCHED_ID AND ROWNUM = 1) AS POS_WORK_SCHED_DSCR
	, POS.POS_HOURS_PER_WEEK
	, CASE WHEN POS.POS_DUAL_EMPLMT = '1' THEN 'Yes' WHEN POS.POS_DUAL_EMPLMT = '0' THEN 'No' ELSE NULL END AS POS_DUAL_EMPLMT
	, POS.POS_SEC_ID
	--, LU_SEC.TBL_LABEL AS POS_SEC_DSCR
	, (SELECT LU_SEC.TBL_LABEL FROM TBL_LOOKUP LU_SEC WHERE LU_SEC.TBL_ID = POS.POS_SEC_ID AND ROWNUM = 1) AS POS_SEC_DSCR
	, CASE WHEN POS.POS_CE_FINANCIAL_DISC = '1' THEN 'Yes' ELSE 'No' END AS POS_CE_FINANCIAL_DISC
	, POS.POS_CE_FINANCIAL_TYPE_ID
	--, LU_FNTP.TBL_LABEL AS POS_CE_FINANCIAL_TYPE_DSCR
	, (SELECT LU_FNTP.TBL_LABEL FROM TBL_LOOKUP LU_FNTP WHERE LU_FNTP.TBL_ID = POS.POS_CE_FINANCIAL_TYPE_ID AND ROWNUM = 1) AS POS_CE_FINANCIAL_TYPE_DSCR
	, CASE WHEN POS.POS_CE_PE_PHYSICAL = '1' THEN 'Yes' ELSE 'No' END AS POS_CE_PE_PHYSICAL
	, CASE WHEN POS.POS_CE_DRUG_TEST = '1' THEN 'Yes' ELSE 'No' END AS POS_CE_DRUG_TEST
	, CASE WHEN POS.POS_CE_IMMUN = '1' THEN 'Yes' ELSE 'No' END AS POS_CE_IMMUN
	, CASE WHEN POS.POS_CE_TRAVEL = '1' THEN 'Yes' ELSE 'No' END AS POS_CE_TRAVEL
	, POS.POS_CE_TRAVEL_PER
	, CASE WHEN POS.POS_CE_LIC = '1' THEN 'Yes' ELSE 'No' END AS POS_CE_LIC
	, POS.POS_CE_LIC_INFO
	, POS.POS_REMARKS
	, POS.POS_PROC_REQ_TYPE
	, POS.POS_RECRUIT_OFFICE_ID
	--, POS.POS_REQ_CREATE_NOTIFY_DT
	, POS.POS_SO_ID
	, POS.POS_ASSOC_DESCR_NUMBERS
	, POS.POS_PROMOTE_POTENTIAL
	, POS.POS_VICE_EMPL_ID
	, POS.POS_SR_ID
	, POS.POS_GR_ID
	, POS.POS_AC_ID
	, CASE WHEN POS.POS_GA_1  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_1
	, CASE WHEN POS.POS_GA_2  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_2
	, CASE WHEN POS.POS_GA_3  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_3
	, CASE WHEN POS.POS_GA_4  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_4
	, CASE WHEN POS.POS_GA_5  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_5
	, CASE WHEN POS.POS_GA_6  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_6
	, CASE WHEN POS.POS_GA_7  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_7
	, CASE WHEN POS.POS_GA_8  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_8
	, CASE WHEN POS.POS_GA_9  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_9
	, CASE WHEN POS.POS_GA_10 = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_10
	, CASE WHEN POS.POS_GA_11 = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_11
	, CASE WHEN POS.POS_GA_12 = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_12
	, CASE WHEN POS.POS_GA_13 = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_13
	, CASE WHEN POS.POS_GA_14 = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_14
	, CASE WHEN POS.POS_GA_15 = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_15

	, FN_GET_GRADE_ADVRT(POS.POS_GA_1, POS.POS_GA_2, POS.POS_GA_3, POS.POS_GA_4, POS.POS_GA_5
		 , POS.POS_GA_6, POS.POS_GA_7, POS.POS_GA_8, POS.POS_GA_9, POS.POS_GA_10
		 , POS.POS_GA_11, POS.POS_GA_12, POS.POS_GA_13, POS.POS_GA_14, POS.POS_GA_15)
	AS POS_GA

	, CASE WHEN AOC.AOC_30PCT_DISABLED_VETS = '1' THEN 'Yes' ELSE 'No' END AS AOC_30PCT_DISABLED_VETS
	, CASE WHEN AOC.AOC_EXPERT_CONS = '1'         THEN 'Yes' ELSE 'No' END AS AOC_EXPERT_CONS
	, CASE WHEN AOC.AOC_IPA = '1'                 THEN 'Yes' ELSE 'No' END AS AOC_IPA
	, CASE WHEN AOC.AOC_OPER_WARFIGHTER = '1'     THEN 'Yes' ELSE 'No' END AS AOC_OPER_WARFIGHTER
	, CASE WHEN AOC.AOC_DISABILITIES = '1'        THEN 'Yes' ELSE 'No' END AS AOC_DISABILITIES
	, CASE WHEN AOC.AOC_STUDENT_VOL = '1'         THEN 'Yes' ELSE 'No' END AS AOC_STUDENT_VOL
	, CASE WHEN AOC.AOC_VETS_RECRUIT_APPT = '1'   THEN 'Yes' ELSE 'No' END AS AOC_VETS_RECRUIT_APPT
	, CASE WHEN AOC.AOC_VOC_REHAB_EMPL = '1'      THEN 'Yes' ELSE 'No' END AS AOC_VOC_REHAB_EMPL
	, CASE WHEN AOC.AOC_WORKFORCE_RECRUIT = '1'   THEN 'Yes' ELSE 'No' END AS AOC_WORKFORCE_RECRUIT
	, AOC.AOC_NON_COMP_APPL
	, CASE WHEN AOC.AOC_MIL_SPOUSES = '1'         THEN 'Yes' ELSE 'No' END AS AOC_MIL_SPOUSES
	, CASE WHEN AOC.AOC_DIRECT_HIRE = '1'         THEN 'Yes' ELSE 'No' END AS AOC_DIRECT_HIRE
	, CASE WHEN AOC.AOC_RE_EMPLOYMENT = '1'       THEN 'Yes' ELSE 'No' END AS AOC_RE_EMPLOYMENT
	, CASE WHEN AOC.AOC_PATHWAYS = '1'            THEN 'Yes' ELSE 'No' END AS AOC_PATHWAYS
	, CASE WHEN AOC.AOC_PEACE_CORPS_VOL = '1'     THEN 'Yes' ELSE 'No' END AS AOC_PEACE_CORPS_VOL
	, CASE WHEN AOC.AOC_REINSTATEMENT = '1'       THEN 'Yes' ELSE 'No' END AS AOC_REINSTATEMENT
	, CASE WHEN AOC.AOC_SHARED_CERT = '1'         THEN 'Yes' ELSE 'No' END AS AOC_SHARED_CERT
	, CASE WHEN AOC.AOC_DELEGATE_EXAM = '1'       THEN 'Yes' ELSE 'No' END AS AOC_DELEGATE_EXAM
	, CASE WHEN AOC.AOC_DH_US_CITIZENS = '1'      THEN 'Yes' ELSE 'No' END AS AOC_DH_US_CITIZENS
	, CASE WHEN AOC.AOC_MP_GOV_WIDE = '1'         THEN 'Yes' ELSE 'No' END AS AOC_MP_GOV_WIDE
	, CASE WHEN AOC.AOC_MP_HHS_ONLY = '1'         THEN 'Yes' ELSE 'No' END AS AOC_MP_HHS_ONLY
	, CASE WHEN AOC.AOC_MP_CMS_ONLY = '1'         THEN 'Yes' ELSE 'No' END AS AOC_MP_CMS_ONLY
	, CASE WHEN AOC.AOC_MP_COMP_CONS_ONLY = '1'   THEN 'Yes' ELSE 'No' END AS AOC_MP_COMP_CONS_ONLY
	, CASE WHEN AOC.AOC_MP_I_CTAP_VEGA = '1'      THEN 'Yes' ELSE 'No' END AS AOC_MP_I_CTAP_VEGA
	, AOC.AOC_NON_BARGAIN_DOC_RATIONALE

	, FN_GET_ANNOUNCE_NOT_REQ(AOC.AOC_30PCT_DISABLED_VETS
		, AOC.AOC_EXPERT_CONS
		, AOC.AOC_IPA
		, AOC.AOC_OPER_WARFIGHTER
		, AOC.AOC_DISABILITIES
		, AOC.AOC_STUDENT_VOL
		, AOC.AOC_VETS_RECRUIT_APPT
		, AOC.AOC_VOC_REHAB_EMPL
		, AOC.AOC_WORKFORCE_RECRUIT)
	AS AOC_ANNOUNCE_NOT_REQ
	, FN_GET_ANNOUNCE_REQ(AOC.AOC_MIL_SPOUSES
		, AOC.AOC_DIRECT_HIRE
		, AOC.AOC_RE_EMPLOYMENT
		, AOC.AOC_PATHWAYS
		, AOC.AOC_PEACE_CORPS_VOL
		, AOC.AOC_REINSTATEMENT
		, AOC.AOC_SHARED_CERT)
	AS AOC_ANNOUNCE_REQ
	, FN_GET_ANNOUNCE_TYPE(AOC.AOC_DELEGATE_EXAM
		, AOC.AOC_DH_US_CITIZENS
		, AOC.AOC_MP_GOV_WIDE
		, AOC.AOC_MP_HHS_ONLY
		, AOC.AOC_MP_CMS_ONLY
		, AOC.AOC_MP_COMP_CONS_ONLY
		, AOC.AOC_MP_I_CTAP_VEGA)
	AS AOC_ANNOUNCE_TYPE

	, CASE WHEN SME.SME_FOR_JOB_ANALYSIS = '1'  THEN 'Yes' ELSE 'No' END AS SME_FOR_JOB_ANALYSIS
	, SME.SME_NAME_JA
	, SME.SME_EMAIL_JA
	, CASE WHEN SME.SME_FOR_QUALIFICATION = '1' THEN 'Yes' ELSE 'No' END AS SME_FOR_QUALIFICATION
	, SME.SME_NAME_QUAL_1
	, SME.SME_EMAIL_QUAL_1
	, SME.SME_NAME_QUAL_2
	, SME.SME_EMAIL_QUAL_2

	, CASE WHEN JA.JA_SEL_FACTOR_REQ = '1'   THEN 'Yes' ELSE 'No' END AS JA_SEL_FACTOR_REQ
	, JA.JA_SEL_FACTOR_JUST
	, CASE WHEN JA.JA_QUAL_RANK_REQ = '1'    THEN 'Yes' ELSE 'No' END AS JA_QUAL_RANK_REQ
	, JA.JA_QUAL_RANK_JUST
	, CASE WHEN JA.JA_RESPONSES_REQ = '1'    THEN 'Yes' ELSE 'No' END AS JA_RESPONSES_REQ
	, CASE WHEN JA.JA_TYPE_YES_NO = '1'      THEN 'Yes' ELSE 'No' END AS JA_TYPE_YES_NO
	, CASE WHEN JA.JA_TYPE_REQ_DEFAULT = '1' THEN 'Yes' ELSE 'No' END AS JA_TYPE_REQ_DEFAULT
	, CASE WHEN JA.JA_TYPE_KNOWL_SCALE = '1' THEN 'Yes' ELSE 'No' END AS JA_TYPE_KNOWL_SCALE

	, FN_GET_ASSESS_TYPE(JA.JA_TYPE_YES_NO
		, JA.JA_TYPE_REQ_DEFAULT
		, JA.JA_TYPE_KNOWL_SCALE)
	AS JA_ASSESS_TYPE

	, RI.RI_OA_APRV_ITEM
	, CASE
		WHEN RI.RI_OA_APRV_ITEM = 'C' THEN 'Recruitment'
		WHEN RI.RI_OA_APRV_ITEM = 'L' THEN 'Relocation'
		ELSE 'N/A'
	END AS RI_OA_APRV_ITEM_DSCR
	, CASE WHEN RI.RI_MOVING_EXP_AUTH = '1' THEN 'Yes' ELSE 'No' END AS RI_MOVING_EXP_AUTH

	, CASE WHEN TR.TR_PAID_AD = '1' THEN 'Yes' ELSE 'No' END AS TR_PAID_AD
	, TR.TR_PAID_AD_SPEC
	, FN_GET_LOOKUP_DSCR(TR.TR_PAID_AD_SPEC) AS TR_PAID_AD_SPEC_DSCR
	, TR.TR_PAID_AD_SPEC_OTHR
	, CASE WHEN TR.TR_SCHL_PSTG = '1' THEN 'Yes' ELSE 'No' END AS TR_SCHL_PSTG
	, TR.TR_SCHL_PSTG_SPEC
	, FN_GET_LOOKUP_DSCR(TR.TR_SCHL_PSTG_SPEC) AS TR_SCHL_PSTG_SPEC_DSCR
	, TR.TR_SCHL_PSTG_SPEC_OTHR
	, CASE WHEN TR.TR_SOCIAL_MEDIA = '1' THEN 'Yes' ELSE 'No' END AS TR_SOCIAL_MEDIA
	, TR.TR_SOCIAL_MEDIA_SPEC
	, FN_GET_LOOKUP_DSCR(TR.TR_SOCIAL_MEDIA_SPEC) AS TR_SOCIAL_MEDIA_SPEC_DSCR
	, TR.TR_SOCIAL_MEDIA_SPEC_OTHR
	, CASE WHEN TR.TR_OTHER = '1' THEN 'Yes' ELSE 'No' END AS TR_OTHER
	, TR.TR_OTHER_SPEC

	, SCA.SCA_SO_SIG
	, SCA.SCA_SO_SIG_DT
	, SCA.SCA_CLASS_SPEC_SIG
	, SCA.SCA_CLASS_SPEC_SIG_DT
	, SCA.SCA_STAFF_SIG
	, SCA.SCA_STAFF_SIG_DT

FROM
	REQUEST R
	LEFT OUTER JOIN STRATCON_GEN SG ON SG.SG_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN POSITION POS ON POS.POS_REQ_ID = R.REQ_ID
	--LEFT OUTER JOIN STRATCON_SCHED_HIST SSH ON SSH.SSH_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN AREAS_OF_CONS AOC ON AOC.AOC_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN SME_INFO SME ON SME.SME_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN JOB_ANALYSIS JA ON JA.JA_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN RECRUIT_INCENTIVES RI ON RI.RI_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN TARGET_RECRUIT TR ON TR.TR_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN APPROVALS SCA ON SCA.SCA_REQ_ID = R.REQ_ID

	--LEFT OUTER JOIN ADMIN_CODES LU_AC ON LU_AC.AC_ID = SG.SG_AC_ID
	--LEFT OUTER JOIN ADMIN_CODES LU_AC ON LU_AC.AC_ADMIN_CD = SG.SG_ADMIN_CD
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_1 ON LU_SO_1.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 1)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_2 ON LU_SO_2.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 2)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_3 ON LU_SO_3.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 3)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_4 ON LU_SO_4.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 4)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_5 ON LU_SO_5.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 5)
    
	--LEFT OUTER JOIN TBL_LOOKUP LU_RT ON LU_RT.TBL_ID = SG.SG_RT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_CT ON LU_CT.TBL_ID = SG.SG_CT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_AT ON LU_AT.TBL_ID = SG.SG_AT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_VT ON LU_VT.TBL_ID = SG.SG_VT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SAT ON LU_SAT.TBL_ID = SG.SG_SAT_ID
    
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMSO ON LU_MEMSO.MEMBERID = SG.SG_SO_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMXO ON LU_MEMXO.MEMBERID = SG.SG_XO_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMHL ON LU_MEMHL.MEMBERID = SG.SG_HRL_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMSS ON LU_MEMSS.MEMBERID = SG.SG_SS_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMCS ON LU_MEMCS.MEMBERID = SG.SG_CS_ID

	--LEFT OUTER JOIN TBL_LOOKUP LU_PYPL ON LU_PYPL.TBL_ID = POS.POS_PAY_PLAN_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_MO ON LU_MO.TBL_ID = POS.POS_MED_OFFICERS_ID
--TODO: Remove TO_NUMBER call once the data type of POS_SUPERVISORY is fixed to NUMBER(20)
	--LEFT OUTER JOIN TBL_LOOKUP LU_SUP ON LU_SUP.TBL_ID = TO_NUMBER(POS.POS_SUPERVISORY)
	--LEFT OUTER JOIN LOCATION LU_LOC ON LU_LOC.LOC_ID = POS.POS_LOCATION
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMRS ON LU_MEMRS.MEMBERID = POS.POS_REPORT_SUPERVISOR
	--LEFT OUTER JOIN TBL_LOOKUP LU_ADT ON LU_ADT.TBL_ID = POS.POS_AT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_WSCHD ON LU_WSCHD.TBL_ID = POS.POS_WORK_SCHED_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SEC ON LU_SEC.TBL_ID = POS.POS_SEC_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_FNTP ON LU_FNTP.TBL_ID = POS.POS_CE_FINANCIAL_TYPE_ID
;

/




--------------------------------------------------------
--  DDL for VW_CLASSIFICATION
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_CLASSIFICATION
AS
SELECT
	R.REQ_ID
	, R.REQ_JOB_REQ_NUMBER
	, R.REQ_JOB_REQ_CREATE_DT
	, R.REQ_STATUS_ID
	, R.REQ_CANCEL_DT
	, R.REQ_CANCEL_REASON

	, CS.CS_TITLE
	, CS.CS_PAY_PLAN_ID
	--, LU_PYPL.TBL_NAME AS CS_PAY_PLAN_DSCR
	, (SELECT LU_PYPL.TBL_NAME FROM TBL_LOOKUP LU_PYPL WHERE LU_PYPL.TBL_ID = CS.CS_PAY_PLAN_ID AND ROWNUM = 1) AS CS_PAY_PLAN_DSCR
	, CS.CS_SR_ID
	--, LU_SR.TBL_LABEL AS CS_SR_DSCR
	, (SELECT LU_SR.TBL_LABEL FROM TBL_LOOKUP LU_SR WHERE LU_SR.TBL_ID = CS.CS_SR_ID AND ROWNUM = 1) AS CS_SR_DSCR
	, CS.CS_PD_NUMBER_JOBCD_1
	, CS.CS_CLASSIFICATION_DT_1
	, CS.CS_GR_ID_1
	, CS.CS_FLSA_DETERM_ID_1
	--, LU_FLSA_1.TBL_LABEL AS CS_FLSA_DETERM_DSCR_1
	, (SELECT LU_FLSA.TBL_LABEL FROM TBL_LOOKUP LU_FLSA WHERE LU_FLSA.TBL_ID = CS.CS_FLSA_DETERM_ID_1 AND ROWNUM = 1) AS CS_FLSA_DETERM_DSCR_1
	, CS.CS_PD_NUMBER_JOBCD_2
	, CS.CS_CLASSIFICATION_DT_2
	, CS.CS_GR_ID_2
	, CS.CS_FLSA_DETERM_ID_2
	--, LU_FLSA_2.TBL_LABEL AS CS_FLSA_DETERM_DSCR_2
	, (SELECT LU_FLSA.TBL_LABEL FROM TBL_LOOKUP LU_FLSA WHERE LU_FLSA.TBL_ID = CS.CS_FLSA_DETERM_ID_2 AND ROWNUM = 1) AS CS_FLSA_DETERM_DSCR_2
	, CS.CS_PD_NUMBER_JOBCD_3
	, CS.CS_CLASSIFICATION_DT_3
	, CS.CS_GR_ID_3
	, CS.CS_FLSA_DETERM_ID_3
	--, LU_FLSA_3.TBL_LABEL AS CS_FLSA_DETERM_DSCR_3
	, (SELECT LU_FLSA.TBL_LABEL FROM TBL_LOOKUP LU_FLSA WHERE LU_FLSA.TBL_ID = CS.CS_FLSA_DETERM_ID_3 AND ROWNUM = 1) AS CS_FLSA_DETERM_DSCR_3
	, CS.CS_PD_NUMBER_JOBCD_4
	, CS.CS_CLASSIFICATION_DT_4
	, CS.CS_GR_ID_4
	, CS.CS_FLSA_DETERM_ID_4
	--, LU_FLSA_4.TBL_LABEL AS CS_FLSA_DETERM_DSCR_4
	, (SELECT LU_FLSA.TBL_LABEL FROM TBL_LOOKUP LU_FLSA WHERE LU_FLSA.TBL_ID = CS.CS_FLSA_DETERM_ID_4 AND ROWNUM = 1) AS CS_FLSA_DETERM_DSCR_4
	, CS.CS_PD_NUMBER_JOBCD_5
	, CS.CS_CLASSIFICATION_DT_5
	, CS.CS_GR_ID_5
	, CS.CS_FLSA_DETERM_ID_5
	--, LU_FLSA_5.TBL_LABEL AS CS_FLSA_DETERM_DSCR_5
	, (SELECT LU_FLSA.TBL_LABEL FROM TBL_LOOKUP LU_FLSA WHERE LU_FLSA.TBL_ID = CS.CS_FLSA_DETERM_ID_5 AND ROWNUM = 1) AS CS_FLSA_DETERM_DSCR_5
	, CS.CS_PERFORMANCE_LEVEL
	, CS.CS_SUPERVISORY
	--, LU_SUP.TBL_LABEL AS CS_SUPERVISORY_DSCR
	, (SELECT LU_SUP.TBL_LABEL FROM TBL_LOOKUP LU_SUP WHERE LU_SUP.TBL_ID = CS.CS_SUPERVISORY AND ROWNUM = 1) AS CS_SUPERVISORY_DSCR
	, CS.CS_AC_ID
	--, LU_AC.AC_ADMIN_CD AS CS_AC_CD
	--, LU_AC.AC_ADMIN_CD_DESCR AS CS_AC_DSCR
	, CS.CS_ADMIN_CD AS CS_ADMIN_CD
	--, LU_AC.AC_ADMIN_CD_DESCR AS CS_ADMIN_CD_DSCR
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = CS_ADMIN_CD AND ROWNUM = 1) AS CS_ADMIN_CD_DSCR
	, CS.SO_ID
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = CS.SO_ID AND ROWNUM = 1)  AS SO_NAME
	, CS.SO_TITLE
	, CS.SO_ORG
	, CS.XO_ID
	, FN_GET_NAMES(CS.XO_ID)  AS XO_NAME
	, CS.XO_TITLE
	, CS.XO_ORG
	, CS.HRL_ID
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = CS.HRL_ID AND ROWNUM = 1)  AS HL_NAME
	, CS.HRL_TITLE
	, CS.HRL_ORG
	, CS.SS_ID
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = CS.SS_ID AND ROWNUM = 1)  AS SS_NAME
	, CS.CS_ID
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = CS.CS_ID AND ROWNUM = 1)  AS CS_NAME
	, CS.CS_FIN_STMT_REQ_ID
	--, LU_FNTP.TBL_LABEL AS CS_FIN_STMT_REQ_DSCR
	, (SELECT LU_FNTP.TBL_LABEL FROM TBL_LOOKUP LU_FNTP WHERE LU_FNTP.TBL_ID = CS.CS_FIN_STMT_REQ_ID AND ROWNUM = 1) AS CS_FIN_STMT_REQ_DSCR
	, CS.CS_SEC_ID
	--, LU_SEC.TBL_LABEL AS CS_SEC_DSCR
	, (SELECT LU_SEC.TBL_LABEL FROM TBL_LOOKUP LU_SEC WHERE LU_SEC.TBL_ID = CS.CS_SEC_ID AND ROWNUM = 1) AS CS_SEC_DSCR
	, PD.PD_ID
	, PD.PD_PROCID
	, PD.PD_ORG_POS_TITLE
	, PD.PD_EMPLOYING_OFFICE
	--, LU_EO.TBL_LABEL AS PD_EMPLOYING_OFFICE_DSCR
	, (SELECT LU_EO.TBL_LABEL FROM TBL_LOOKUP LU_EO WHERE LU_EO.TBL_ID = PD.PD_EMPLOYING_OFFICE AND ROWNUM = 1) AS PD_EMPLOYING_OFFICE_DSCR
	, CASE WHEN PD.PD_SUBJECT_IA = '1' THEN 'Yes' ELSE 'No' END AS PD_SUBJECT_IA
	, PD.PD_ORGANIZATION
	, PD.PD_SUB_ORG_1
	--, LU_SO_1.AC_ADMIN_CD_DESCR AS PD_SUB_ORG_DSCR_1
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = PD_SUB_ORG_1 AND ROWNUM = 1) AS PD_SUB_ORG_DSCR_1
	, PD.PD_SUB_ORG_2
	--, LU_SO_2.AC_ADMIN_CD_DESCR AS PD_SUB_ORG_DSCR_2
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = PD_SUB_ORG_2 AND ROWNUM = 1) AS PD_SUB_ORG_DSCR_2
	, PD.PD_SUB_ORG_3
	--, LU_SO_3.AC_ADMIN_CD_DESCR AS PD_SUB_ORG_DSCR_3
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = PD_SUB_ORG_3 AND ROWNUM = 1) AS PD_SUB_ORG_DSCR_3
	, PD.PD_SUB_ORG_4
	--, LU_SO_4.AC_ADMIN_CD_DESCR AS PD_SUB_ORG_DSCR_4
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = PD_SUB_ORG_4 AND ROWNUM = 1) AS PD_SUB_ORG_DSCR_4
	, PD.PD_SUB_ORG_5
	--, LU_SO_5.AC_ADMIN_CD_DESCR AS PD_SUB_ORG_DSCR_5
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = PD_SUB_ORG_5 AND ROWNUM = 1) AS PD_SUB_ORG_DSCR_5
	, PD.PD_SCOPE
	, CASE WHEN PD.PD_PCA = '1'        THEN 'Yes' ELSE 'No' END AS PD_PCA
	, CASE WHEN PD.PD_PDP = '1'        THEN 'Yes' ELSE 'No' END AS PD_PDP
	, CASE WHEN PD.PD_FTT = '1'        THEN 'Yes' ELSE 'No' END AS PD_FTT
	, CASE WHEN PD.PD_OUTSTATION = '1' THEN 'Yes' ELSE 'No' END AS PD_OUTSTATION
	, CASE WHEN PD.PD_INCUMBENCY = '1' THEN 'Yes' ELSE 'No' END AS PD_INCUMBENCY
	, PD.PD_REMARKS
	, PD.PD_CLS_STANDARDS
	, FN_GET_LOOKUP_DSCR(PD.PD_CLS_STANDARDS) AS PD_CLS_STANDARDS_DSCR
	, PD.PD_ACQ_CODE
	--, LU_ACQ.TBL_NAME AS PD_ACQ_CODE_DSCR
	, (SELECT LU_ACQ.TBL_NAME FROM TBL_LOOKUP LU_ACQ WHERE LU_ACQ.TBL_ID = PD.PD_ACQ_CODE AND ROWNUM = 1) AS PD_ACQ_CODE_DSCR
	, PD.PD_CYB_SEC_CD
	--, LU_CSEC.TBL_LABEL AS PD_CYB_SEC_CD_DSCR
	--, (SELECT LU_CSEC.TBL_LABEL FROM TBL_LOOKUP LU_CSEC WHERE LU_CSEC.TBL_ID = PD.PD_CYB_SEC_CD AND ROWNUM = 1) AS PD_CYB_SEC_CD_DSCR
	, FN_GET_LOOKUP_DSCR(PD.PD_CYB_SEC_CD) AS PD_CYB_SEC_CD_DSCR
	, PD.PD_COMPET_LVL_CD
	, PD.PD_BUS_CD
	--, LU_BUS.TBL_LABEL AS PD_BUS_CD_DSCR
	, (SELECT LU_BUS.TBL_LABEL FROM TBL_LOOKUP LU_BUS WHERE LU_BUS.TBL_ID = PD.PD_BUS_CD AND ROWNUM = 1) AS PD_BUS_CD_DSCR
	, PD.BYPASS_DWC_FL

	, CASE WHEN PD.PD_SUPV_CERT = '1' THEN 'Yes' ELSE 'No' END AS PD_SUPV_CERT
	, PD.PD_SUPV_NAME
	, PD.PD_SUPV_TITLE
	, PD.PD_SUPV_SIG
	, PD.PD_SUPV_SIG_DT
	, CASE WHEN PD.PD_CLS_SPEC_CERT = '1' THEN 'Yes' ELSE 'No' END AS PD_CLS_SPEC_CERT
	, PD.PD_CLS_SPEC_NAME
	, PD.PD_CLS_SPEC_TITLE
	, PD.PD_CLS_SPEC_SIG
	, PD.PD_CLS_SPEC_DT

	, CASE WHEN FLSA.FLSA_EX_EXEC = '1'            THEN 'Yes' ELSE 'No' END AS FLSA_EX_EXEC
	, CASE WHEN FLSA.FLSA_EX_ADMIN = '1'           THEN 'Yes' ELSE 'No' END AS FLSA_EX_ADMIN
	, CASE WHEN FLSA.FLSA_EX_PROF_LEARNED = '1'    THEN 'Yes' ELSE 'No' END AS FLSA_EX_PROF_LEARNED
	, CASE WHEN FLSA.FLSA_EX_PROF_CREATIVE = '1'   THEN 'Yes' ELSE 'No' END AS FLSA_EX_PROF_CREATIVE
	, CASE WHEN FLSA.FLSA_EX_PROF_COMPUTER = '1'   THEN 'Yes' ELSE 'No' END AS FLSA_EX_PROF_COMPUTER
	, CASE WHEN FLSA.FLSA_EX_LAW_ENFORC = '1'      THEN 'Yes' ELSE 'No' END AS FLSA_EX_LAW_ENFORC
	, CASE WHEN FLSA.FLSA_EX_FOREIGN = '1'         THEN 'Yes' ELSE 'No' END AS FLSA_EX_FOREIGN
	, FLSA.FLSA_EX_REMARKS
	, CASE WHEN FLSA.FLSA_NONEX_SALARY = '1'       THEN 'Yes' ELSE 'No' END AS FLSA_NONEX_SALARY
	, CASE WHEN FLSA.FLSA_NONEX_EQUIP_OPER = '1'   THEN 'Yes' ELSE 'No' END AS FLSA_NONEX_EQUIP_OPER
	, CASE WHEN FLSA.FLSA_NONEX_TECHN = '1'        THEN 'Yes' ELSE 'No' END AS FLSA_NONEX_TECHN
	, CASE WHEN FLSA.FLSA_NONEX_FED_WAGE_SYS = '1' THEN 'Yes' ELSE 'No' END AS FLSA_NONEX_FED_WAGE_SYS
	, FLSA.FLSA_NONEX_REMARKS

FROM
	REQUEST R
	LEFT OUTER JOIN CLASSIF_STRATCON CS ON CS.CS_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN PD_COVERSHEET PD ON PD.PD_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN FLSA FLSA ON FLSA.FLSA_PD_ID = PD.PD_ID

	--LEFT OUTER JOIN TBL_LOOKUP LU_PYPL ON LU_PYPL.TBL_ID = CS.CS_PAY_PLAN_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SR ON LU_SR.TBL_ID = CS.CS_SR_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_FLSA_1 ON LU_FLSA_1.TBL_ID = CS.CS_FLSA_DETERM_ID_1
	--LEFT OUTER JOIN TBL_LOOKUP LU_FLSA_2 ON LU_FLSA_2.TBL_ID = CS.CS_FLSA_DETERM_ID_2
	--LEFT OUTER JOIN TBL_LOOKUP LU_FLSA_3 ON LU_FLSA_3.TBL_ID = CS.CS_FLSA_DETERM_ID_3
	--LEFT OUTER JOIN TBL_LOOKUP LU_FLSA_4 ON LU_FLSA_4.TBL_ID = CS.CS_FLSA_DETERM_ID_4
	--LEFT OUTER JOIN TBL_LOOKUP LU_FLSA_5 ON LU_FLSA_5.TBL_ID = CS.CS_FLSA_DETERM_ID_5
	--LEFT OUTER JOIN TBL_LOOKUP LU_SUP ON LU_SUP.TBL_ID = CS.CS_SUPERVISORY
	--LEFT OUTER JOIN ADMIN_CODES LU_AC ON LU_AC.AC_ID = CS.CS_AC_ID
	--LEFT OUTER JOIN ADMIN_CODES LU_AC ON LU_AC.AC_ADMIN_CD = CS.CS_ADMIN_CD
	--LEFT OUTER JOIN TBL_LOOKUP LU_FNTP ON LU_FNTP.TBL_ID = CS.CS_FIN_STMT_REQ_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SEC ON LU_SEC.TBL_ID = CS.CS_SEC_ID

	--LEFT OUTER JOIN TBL_LOOKUP LU_EO ON LU_EO.TBL_ID = PD.PD_EMPLOYING_OFFICE
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_1 ON LU_SO_1.AC_ADMIN_CD = PD.PD_SUB_ORG_1
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_2 ON LU_SO_2.AC_ADMIN_CD = PD.PD_SUB_ORG_2
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_3 ON LU_SO_3.AC_ADMIN_CD = PD.PD_SUB_ORG_3
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_4 ON LU_SO_4.AC_ADMIN_CD = PD.PD_SUB_ORG_4
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_5 ON LU_SO_5.AC_ADMIN_CD = PD.PD_SUB_ORG_5
	--LEFT OUTER JOIN TBL_LOOKUP LU_ACQ ON LU_ACQ.TBL_ID = PD.PD_ACQ_CODE
	--LEFT OUTER JOIN TBL_LOOKUP LU_CSEC ON LU_CSEC.TBL_ID = PD.PD_CYB_SEC_CD
	--LEFT OUTER JOIN TBL_LOOKUP LU_BUS ON LU_BUS.TBL_ID = PD.PD_BUS_CD

;

/




--------------------------------------------------------
--  DDL for VW_ELIGQUAL
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_ELIGQUAL
AS
SELECT
	R.REQ_ID
	, R.REQ_JOB_REQ_NUMBER
	, R.REQ_JOB_REQ_CREATE_DT
	, R.REQ_STATUS_ID
	, R.REQ_CANCEL_DT
	, R.REQ_CANCEL_REASON

	, EQ.ELIGQUAL_ID
	, EQ.PROCID
	, EQ.ADMIN_CD AS ADMIN_CD
	--, LU_AC.AC_ADMIN_CD_DESCR AS ADMIN_CD_DSCR
	--, LU_SO_1.AC_ADMIN_CD AS SUB_ORG_1_CD
	--, LU_SO_1.AC_ADMIN_CD_DESCR AS SUB_ORG_1_DSCR
	--, LU_SO_2.AC_ADMIN_CD AS SUB_ORG_2_CD
	--, LU_SO_2.AC_ADMIN_CD_DESCR AS SUB_ORG_2_DSCR
	--, LU_SO_3.AC_ADMIN_CD AS SUB_ORG_3_CD
	--, LU_SO_3.AC_ADMIN_CD_DESCR AS SUB_ORG_3_DSCR
	--, LU_SO_4.AC_ADMIN_CD AS SUB_ORG_4_CD
	--, LU_SO_4.AC_ADMIN_CD_DESCR AS SUB_ORG_4_DSCR
	--, LU_SO_5.AC_ADMIN_CD AS SUB_ORG_5_CD
	--, LU_SO_5.AC_ADMIN_CD_DESCR AS SUB_ORG_5_DSCR
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = EQ.ADMIN_CD AND ROWNUM = 1) AS ADMIN_CD_DSCR
	, FN_GET_SUBORG_CD(EQ.ADMIN_CD, 1) AS SUB_ORG_1_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 1) AND ROWNUM = 1) AS SUB_ORG_1_DSCR
	, FN_GET_SUBORG_CD(EQ.ADMIN_CD, 2) AS SUB_ORG_2_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 2) AND ROWNUM = 1) AS SUB_ORG_2_DSCR
	, FN_GET_SUBORG_CD(EQ.ADMIN_CD, 3) AS SUB_ORG_3_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 3) AND ROWNUM = 1) AS SUB_ORG_3_DSCR
	, FN_GET_SUBORG_CD(EQ.ADMIN_CD, 4) AS SUB_ORG_4_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 4) AND ROWNUM = 1) AS SUB_ORG_4_DSCR
	, FN_GET_SUBORG_CD(EQ.ADMIN_CD, 5) AS SUB_ORG_5_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 5) AND ROWNUM = 1) AS SUB_ORG_5_DSCR
	, EQ.RT_ID
	--, LU_RT.TBL_LABEL AS RT_DSCR
	, (SELECT LU_RT.TBL_LABEL FROM TBL_LOOKUP LU_RT WHERE LU_RT.TBL_ID = EQ.RT_ID AND ROWNUM = 1) AS RT_DSCR
	, EQ.AT_ID
	--, LU_AT.TBL_LABEL AS AT_DSCR
	, (SELECT LU_AT.TBL_LABEL FROM TBL_LOOKUP LU_AT WHERE LU_AT.TBL_ID = EQ.AT_ID AND ROWNUM = 1) AS AT_DSCR
	, EQ.VT_ID
	--, LU_VT.TBL_LABEL AS VT_DSCR
	, (SELECT LU_VT.TBL_LABEL FROM TBL_LOOKUP LU_VT WHERE LU_VT.TBL_ID = EQ.VT_ID AND ROWNUM = 1) AS VT_DSCR
	, EQ.SAT_ID
	--, LU_SAT.TBL_LABEL AS SAT_DSCR
	, (SELECT LU_SAT.TBL_LABEL FROM TBL_LOOKUP LU_SAT WHERE LU_SAT.TBL_ID = EQ.SAT_ID AND ROWNUM = 1)  AS SAT_DSCR
	, EQ.CT_ID
	--, LU_CT.TBL_LABEL AS CT_DSCR
	, (SELECT LU_CT.TBL_LABEL FROM TBL_LOOKUP LU_CT WHERE LU_CT.TBL_ID = EQ.CT_ID AND ROWNUM = 1)  AS CT_DSCR
	, EQ.SO_ID
	--, LU_MEMSO.NAME AS SO_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = EQ.SO_ID AND ROWNUM = 1)  AS SO_NAME
	, EQ.SO_TITLE
	, EQ.SO_ORG
	, EQ.XO_ID
	--, LU_MEMXO.NAME AS XO_NAME
	, FN_GET_NAMES(EQ.XO_ID)  AS XO_NAME
	, EQ.XO_TITLE
	, EQ.XO_ORG
	, EQ.HRL_ID
	--, LU_MEMHL.NAME AS HL_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = EQ.HRL_ID AND ROWNUM = 1)  AS HL_NAME
	, EQ.HRL_TITLE
	, EQ.HRL_ORG
	, EQ.SS_ID
	--, LU_MEMSS.NAME AS SS_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = EQ.SS_ID AND ROWNUM = 1)  AS SS_NAME
	, EQ.CS_ID
	--, LU_MEMCS.NAME AS CS_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = EQ.CS_ID AND ROWNUM = 1)  AS CS_NAME
	, CASE WHEN EQ.SO_AGREE = '1' THEN 'Yes' ELSE 'No' END AS SO_AGREE
	, EQ.OTHER_CERT
	, FN_GET_MEMBER_DSCR(EQ.OTHER_CERT) AS OTHER_CERT_DSCR

	, EQ.CNDT_LAST_NM
	, EQ.CNDT_FIRST_NM
	, EQ.CNDT_MIDDLE_NM
	, CASE WHEN EQ.BGT_APR_OFM = '1' THEN 'Yes' WHEN EQ.BGT_APR_OFM = '0' THEN 'No' ELSE 'N/A' END AS BGT_APR_OFM
	, EQ.SPNSR_ORG_NM
	, EQ.SPNSR_ORG_FUND_PC
	, EQ.POS_TITLE
	, EQ.PAY_PLAN_ID
	--, LU_PYPL.TBL_NAME AS PAY_PLAN_DSCR
	, (SELECT LU_PYPL.TBL_NAME FROM TBL_LOOKUP LU_PYPL WHERE LU_PYPL.TBL_ID = EQ.PAY_PLAN_ID AND ROWNUM = 1)  AS PAY_PLAN_DSCR
	, EQ.SERIES
	, EQ.POS_DESC_NUMBER_1
	, EQ.CLASSIFICATION_DT_1
	, EQ.GRADE_1
	, EQ.POS_DESC_NUMBER_2
	, EQ.CLASSIFICATION_DT_2
	, EQ.GRADE_2
	, EQ.POS_DESC_NUMBER_3
	, EQ.CLASSIFICATION_DT_3
	, EQ.GRADE_3
	, EQ.POS_DESC_NUMBER_4
	, EQ.CLASSIFICATION_DT_4
	, EQ.GRADE_4
	, EQ.POS_DESC_NUMBER_5
	, EQ.CLASSIFICATION_DT_5
	, EQ.GRADE_5
	, EQ.MED_OFFICERS_ID
	--, LU_MO.TBL_LABEL AS MED_OFFICERS_DSCR
	, (SELECT  LU_MO.TBL_LABEL FROM TBL_LOOKUP LU_MO WHERE LU_MO.TBL_ID = EQ.MED_OFFICERS_ID AND ROWNUM = 1)  AS MED_OFFICERS_DSCR
	, EQ.PERFORMANCE_LEVEL
	, EQ.SUPERVISORY
	--, LU_SUP.TBL_LABEL AS SUPERVISORY_DSCR
	, (SELECT LU_SUP.TBL_LABEL FROM TBL_LOOKUP LU_SUP WHERE LU_SUP.TBL_ID = EQ.SUPERVISORY AND ROWNUM = 1)  AS SUPERVISORY_DSCR
	, EQ.SKILL
	, EQ.LOCATION
	--, LU_LOC.LOC_CITY || ', ' || LU_LOC.LOC_STATE AS LOCATION_DSCR
	, FN_GET_LOCATION_DSCR(EQ.LOCATION) AS LOCATION_DSCR
	, EQ.VACANCIES
	, EQ.REPORT_SUPERVISOR
	--, LU_MEMRS.NAME AS REPORT_SUPERVISOR_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = EQ.REPORT_SUPERVISOR AND ROWNUM = 1)  AS REPORT_SUPERVISOR_NAME
	, EQ.CAN
	, CASE WHEN EQ.VICE = '1' THEN 'Yes' ELSE 'No' END AS VICE
	, EQ.VICE_NAME
	, EQ.DAYS_ADVERTISED
	, EQ.TA_ID
	--, LU_ADT.TBL_LABEL AS TA_DSCR
	, (SELECT LU_ADT.TBL_LABEL FROM TBL_LOOKUP LU_ADT WHERE LU_ADT.TBL_ID = EQ.TA_ID AND ROWNUM = 1)  AS TA_DSCR
	, EQ.NTE
	, EQ.WORK_SCHED_ID
	--, LU_WSCHD.TBL_LABEL AS WORK_SCHED_DSCR
	, (SELECT LU_WSCHD.TBL_LABEL FROM TBL_LOOKUP LU_WSCHD WHERE LU_WSCHD.TBL_ID = EQ.WORK_SCHED_ID AND ROWNUM = 1)  AS WORK_SCHED_DSCR
	, EQ.HOURS_PER_WEEK
	, CASE WHEN EQ.DUAL_EMPLMT = '1' THEN 'Yes' WHEN EQ.DUAL_EMPLMT = '0' THEN 'No' ELSE NULL END AS DUAL_EMPLMT
	, EQ.SEC_ID
	--, LU_SEC.TBL_LABEL AS SEC_DSCR
	, (SELECT LU_SEC.TBL_LABEL FROM TBL_LOOKUP LU_SEC WHERE LU_SEC.TBL_ID = EQ.SEC_ID AND ROWNUM = 1)  AS SEC_DSCR
	, CASE WHEN EQ.CE_FINANCIAL_DISC = '1' THEN 'Yes' ELSE 'No' END AS CE_FINANCIAL_DISC
	, EQ.CE_FINANCIAL_TYPE_ID
	--, LU_FNTP.TBL_LABEL AS CE_FINANCIAL_TYPE_DSCR
	, (SELECT LU_FNTP.TBL_LABEL FROM TBL_LOOKUP LU_FNTP WHERE LU_FNTP.TBL_ID = EQ.CE_FINANCIAL_TYPE_ID AND ROWNUM = 1)  AS CE_FINANCIAL_TYPE_DSCR
	, CASE WHEN EQ.CE_PE_PHYSICAL = '1' THEN 'Yes' ELSE 'No' END AS CE_PE_PHYSICAL
	, CASE WHEN EQ.CE_DRUG_TEST = '1' THEN 'Yes' ELSE 'No' END AS CE_DRUG_TEST
	, CASE WHEN EQ.CE_IMMUN = '1' THEN 'Yes' ELSE 'No' END AS CE_IMMUN
	, CASE WHEN EQ.CE_TRAVEL = '1' THEN 'Yes' ELSE 'No' END AS CE_TRAVEL
	, EQ.CE_TRAVEL_PER
	, CASE WHEN EQ.CE_LIC = '1' THEN 'Yes' ELSE 'No' END AS CE_LIC
	, EQ.CE_LIC_INFO
	, EQ.REMARKS
	, EQ.PROC_REQ_TYPE
	, EQ.RECRUIT_OFFICE_ID
	, EQ.ASSOC_DESCR_NUMBERS
	, EQ.PROMOTE_POTENTIAL
	, EQ.VICE_EMPL_ID
	, EQ.SR_ID
	, EQ.GR_ID
	, CASE WHEN EQ.GA_1  = '1' THEN 'Yes' ELSE 'No' END AS GA_1
	, CASE WHEN EQ.GA_2  = '1' THEN 'Yes' ELSE 'No' END AS GA_2
	, CASE WHEN EQ.GA_3  = '1' THEN 'Yes' ELSE 'No' END AS GA_3
	, CASE WHEN EQ.GA_4  = '1' THEN 'Yes' ELSE 'No' END AS GA_4
	, CASE WHEN EQ.GA_5  = '1' THEN 'Yes' ELSE 'No' END AS GA_5
	, CASE WHEN EQ.GA_6  = '1' THEN 'Yes' ELSE 'No' END AS GA_6
	, CASE WHEN EQ.GA_7  = '1' THEN 'Yes' ELSE 'No' END AS GA_7
	, CASE WHEN EQ.GA_8  = '1' THEN 'Yes' ELSE 'No' END AS GA_8
	, CASE WHEN EQ.GA_9  = '1' THEN 'Yes' ELSE 'No' END AS GA_9
	, CASE WHEN EQ.GA_10 = '1' THEN 'Yes' ELSE 'No' END AS GA_10
	, CASE WHEN EQ.GA_11 = '1' THEN 'Yes' ELSE 'No' END AS GA_11
	, CASE WHEN EQ.GA_12 = '1' THEN 'Yes' ELSE 'No' END AS GA_12
	, CASE WHEN EQ.GA_13 = '1' THEN 'Yes' ELSE 'No' END AS GA_13
	, CASE WHEN EQ.GA_14 = '1' THEN 'Yes' ELSE 'No' END AS GA_14
	, CASE WHEN EQ.GA_15 = '1' THEN 'Yes' ELSE 'No' END AS GA_15

	, FN_GET_GRADE_ADVRT(EQ.GA_1, EQ.GA_2, EQ.GA_3, EQ.GA_4, EQ.GA_5
		 , EQ.GA_6, EQ.GA_7, EQ.GA_8, EQ.GA_9, EQ.GA_10
		 , EQ.GA_11, EQ.GA_12, EQ.GA_13, EQ.GA_14, EQ.GA_15)
	AS GA

	, EQ.CNDT_ELIGIBLE
	, EQ.INELIG_REASON
	--, LU_IER.TBL_LABEL AS INELIG_REASON_DSCR
	, (SELECT LU_IER.TBL_LABEL FROM TBL_LOOKUP LU_IER WHERE LU_IER.TBL_ID = EQ.INELIG_REASON AND ROWNUM = 1)  AS INELIG_REASON_DSCR
	, EQ.CNDT_QUALIFIED
	, EQ.DISQUAL_REASON
	--, LU_DQR.TBL_LABEL AS DISQUAL_REASON_DSCR
	, (SELECT LU_DQR.TBL_LABEL FROM TBL_LOOKUP LU_DQR WHERE LU_DQR.TBL_ID = EQ.DISQUAL_REASON AND ROWNUM = 1)  AS DISQUAL_REASON_DSCR
	, EQ.SEL_DETERM
	--, LU_SD.TBL_LABEL AS SEL_DETERM_DSCR
	, (SELECT LU_SD.TBL_LABEL FROM TBL_LOOKUP LU_SD WHERE LU_SD.TBL_ID = EQ.SEL_DETERM AND ROWNUM = 1)  AS SEL_DETERM_DSCR
	, EQ.DCO_CERT
	, EQ.DCO_NAME
	, EQ.DCO_SIG
	, EQ.DCO_SIG_DT

FROM
	REQUEST R
	LEFT OUTER JOIN ELIG_QUAL EQ ON EQ.REQ_ID = R.REQ_ID

	--LEFT OUTER JOIN ADMIN_CODES LU_AC ON LU_AC.AC_ADMIN_CD = EQ.ADMIN_CD
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_1 ON LU_SO_1.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 1)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_2 ON LU_SO_2.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 2)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_3 ON LU_SO_3.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 3)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_4 ON LU_SO_4.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 4)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_5 ON LU_SO_5.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 5)
    
	--LEFT OUTER JOIN TBL_LOOKUP LU_RT ON LU_RT.TBL_ID = EQ.RT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_CT ON LU_CT.TBL_ID = EQ.CT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_AT ON LU_AT.TBL_ID = EQ.AT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_VT ON LU_VT.TBL_ID = EQ.VT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SAT ON LU_SAT.TBL_ID = EQ.SAT_ID
    
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMSO ON LU_MEMSO.MEMBERID = EQ.SO_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMXO ON LU_MEMXO.MEMBERID = EQ.XO_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMHL ON LU_MEMHL.MEMBERID = EQ.HRL_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMSS ON LU_MEMSS.MEMBERID = EQ.SS_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMCS ON LU_MEMCS.MEMBERID = EQ.CS_ID

	--LEFT OUTER JOIN TBL_LOOKUP LU_PYPL ON LU_PYPL.TBL_ID = EQ.PAY_PLAN_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_MO ON LU_MO.TBL_ID = EQ.MED_OFFICERS_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SUP ON LU_SUP.TBL_ID = EQ.SUPERVISORY
	--LEFT OUTER JOIN LOCATION LU_LOC ON LU_LOC.LOC_ID = EQ.LOCATION
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMRS ON LU_MEMRS.MEMBERID = EQ.REPORT_SUPERVISOR
	--LEFT OUTER JOIN TBL_LOOKUP LU_ADT ON LU_ADT.TBL_ID = EQ.TA_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_WSCHD ON LU_WSCHD.TBL_ID = EQ.WORK_SCHED_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SEC ON LU_SEC.TBL_ID = EQ.SEC_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_FNTP ON LU_FNTP.TBL_ID = EQ.CE_FINANCIAL_TYPE_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SD ON LU_SD.TBL_ID = EQ.SEL_DETERM
	--LEFT OUTER JOIN TBL_LOOKUP LU_IER ON LU_IER.TBL_ID = EQ.INELIG_REASON
	--LEFT OUTER JOIN TBL_LOOKUP LU_DQR ON LU_DQR.TBL_ID = EQ.DISQUAL_REASON
;

/

--------------------------------------------------------
--  DDL for VW_UNIFIED_REQUESTS_RANK
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_UNIFIED_REQUESTS_RANK
AS

    SELECT REQ.*, RANK() OVER (PARTITION BY REQ.REQ_JOB_REQ_NUMBER ORDER BY REQ.CREATIONDTIME DESC) REQ_RANK FROM (
          SELECT UNION_REQ.*, TO_CHAR(UNION_REQ.REQ_JOB_REQ_CREATE_DT, 'MM-DD-YYYY HH24:MI:SS') AS REQ_DATE_STRING
              , P.CREATIONDTIME, TO_CHAR(P.CREATIONDTIME, 'MM-DD-YYYY HH24:MI:SS') AS CREATION_DATE_STRING
              , P.STATE AS PROC_STATE
          FROM (
               SELECT REQ_ID, REQ_JOB_REQ_NUMBER, REQ_JOB_REQ_CREATE_DT, REQ_STATUS_ID, REQ_CANCEL_DT, REQ_CANCEL_REASON, PD_PROCID AS PROC_ID, 'CLASSIFICATION' AS PROC_TYPE  FROM VW_CLASSIFICATION
               UNION
               SELECT REQ_ID, REQ_JOB_REQ_NUMBER, REQ_JOB_REQ_CREATE_DT, REQ_STATUS_ID, REQ_CANCEL_DT, REQ_CANCEL_REASON, PROCID AS PROC_ID, 'ELIGQUAL' AS PROC_TYPE FROM VW_ELIGQUAL
               UNION
               SELECT REQ_ID, REQ_JOB_REQ_NUMBER, REQ_JOB_REQ_CREATE_DT, REQ_STATUS_ID, REQ_CANCEL_DT, REQ_CANCEL_REASON, SG_PROCID AS PROC_ID, 'STRATCON' AS PROC_TYPE FROM VW_STRATCON
               ) UNION_REQ
                 INNER JOIN BIZFLOW.PROCS P ON P.PROCID = UNION_REQ.PROC_ID
          WHERE UNION_REQ.PROC_ID IS NOT NULL
          ) REQ

;
/

--------------------------------------------------------
--  DDL for VW_UNIFIED_REQUESTS
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_UNIFIED_REQUESTS
	AS

		SELECT REQ.*
				,REGEXP_SUBSTR(XO_ID, '[^,]+', 1, 1) AS XO_ID1
				,REGEXP_SUBSTR(XO_ID, '[^,]+', 1, 2) AS XO_ID2
				,REGEXP_SUBSTR(XO_ID, '[^,]+', 1, 3) AS XO_ID3
				,REGEXP_SUBSTR(XO_NAME, '[^;]+', 1, 1) AS XO_NAME1
				,REGEXP_SUBSTR(XO_NAME, '[^;]+', 1, 2) AS XO_NAME2
				,REGEXP_SUBSTR(XO_NAME, '[^;]+', 1, 3) AS XO_NAME3
				,REGEXP_SUBSTR(XO_TITLE, '[^_/~]+', 1, 1) AS XO_TITLE1
				,REGEXP_SUBSTR(XO_TITLE, '[^_/~]+', 1, 2) AS XO_TITLE2
				,REGEXP_SUBSTR(XO_TITLE, '[^_/~]+', 1, 3) AS XO_TITLE3
				,REGEXP_SUBSTR(XO_ORG, '[^_/~]+', 1, 1) AS XO_ORG1
				,REGEXP_SUBSTR(XO_ORG, '[^_/~]+', 1, 2) AS XO_ORG2
				,REGEXP_SUBSTR(XO_ORG, '[^_/~]+', 1, 3) AS XO_ORG3
		FROM (
				 SELECT RR.REQ_ID, RR.REQ_JOB_REQ_NUMBER REQUEST_NUMBER, RR.REQ_JOB_REQ_CREATE_DT REQUEST_DATE
						 , RR.REQ_CANCEL_DT REQ_CANCEL_DATE, RR.REQ_CANCEL_REASON, RR.PROC_ID, RR.PROC_STATE, RR.PROC_TYPE
						 , VST.SG_RT_ID REQUEST_TYPE_ID, VST.SG_RT_DSCR REQUEST_TYPE
						 , VST.SG_ADMIN_CD ADMIN_CODE, VST.SG_ADMIN_CD_DSCR ADMIN_CODE_DESC
						 , VST.SG_SO_ID SO_ID, VST.SG_SO_NAME SO_NAME, VST.SG_SO_TITLE SO_TITLE, VST.SG_SO_ORG SO_ORG
						 , VST.SG_XO_ID XO_ID, VST.SG_XO_NAME XO_NAME, VST.SG_XO_TITLE XO_TITLE, VST.SG_XO_ORG XO_ORG
						 , VST.SG_HRL_ID HRL_ID, VST.SG_HL_NAME HRL_NAME, VST.SG_HRL_TITLE HRL_TITLE, VST.SG_HRL_ORG HRL_ORG
						 , VST.POS_TITLE POS_TITLE, VST.POS_PAY_PLAN_ID PAY_PLAN_ID, VST.POS_PAY_PLAN_DSCR PAY_PLAN_DESC
						 , VST.POS_SR_ID POS_SERIES_ID, (SELECT LU_SR.TBL_LABEL FROM TBL_LOOKUP LU_SR WHERE LU_SR.TBL_ID = VST.POS_SR_ID AND ROWNUM = 1) AS POS_SERIES_DESC
						 , VST.POS_GRADE_1 POS_GRADE1, VST.POS_GRADE_2 POS_GRADE2, VST.POS_GRADE_3 POS_GRADE3, VST.POS_GRADE_4 POS_GRADE4, VST.POS_GRADE_5 POS_GRADE5
						 , VST.POS_CNDT_FIRST_NM CANDI_FIRST_NAME, VST.POS_CNDT_MIDDLE_NM CANDI_MIDDLE_NAME, VST.POS_CNDT_LAST_NM CANDI_LAST_NAME
						 , VST.POS_CE_LIC LICENSE, VST.POS_CE_LIC_INFO LICENSE_INFO
				 FROM VW_UNIFIED_REQUESTS_RANK RR
								INNER JOIN VW_STRATCON VST ON VST.REQ_ID = RR.REQ_ID AND RR.PROC_TYPE='STRATCON' AND RR.REQ_RANK=1

				 UNION ALL

				 SELECT RR.REQ_ID, RR.REQ_JOB_REQ_NUMBER REQUEST_NUMBER, RR.REQ_JOB_REQ_CREATE_DT REQUEST_DATE
						 , RR.REQ_CANCEL_DT REQ_CANCEL_DATE, RR.REQ_CANCEL_REASON, RR.PROC_ID, RR.PROC_STATE, RR.PROC_TYPE
						 , VST.SG_RT_ID REQUEST_TYPE_ID, VST.SG_RT_DSCR REQUEST_TYPE
						 , VCL.CS_ADMIN_CD ADMIN_CODE, VCL.CS_ADMIN_CD_DSCR ADMIN_CODE_DESC
						 , VST.SG_SO_ID SO_ID, VST.SG_SO_NAME SO_NAME, VST.SG_SO_TITLE SO_TITLE, VST.SG_SO_ORG SO_ORG
						 , VST.SG_XO_ID XO_ID, VST.SG_XO_NAME XO_NAME, VST.SG_XO_TITLE XO_TITLE, VST.SG_XO_ORG XO_ORG
						 , VST.SG_HRL_ID HRL_ID, VST.SG_HL_NAME HRL_NAME, VST.SG_HRL_TITLE HRL_TITLE, VST.SG_HRL_ORG HRL_ORG
						 , VCL.CS_TITLE POS_TITLE, VCL.CS_PAY_PLAN_ID PAY_PLAN_ID, VCL.CS_PAY_PLAN_DSCR PAY_PLAN_DESC
						 , VCL.CS_SR_ID POS_SERIES_ID, VCL.CS_SR_DSCR POS_SERIES_DESC
						 , VCL.CS_GR_ID_1 POS_GRADE1, VCL.CS_GR_ID_2 POS_GRADE2, VCL.CS_GR_ID_3 POS_GRADE3, VCL.CS_GR_ID_4 POS_GRADE4, VCL.CS_GR_ID_5 POS_GRADE5
						 , VST.POS_CNDT_FIRST_NM CANDI_FIRST_NAME, VST.POS_CNDT_MIDDLE_NM CANDI_MIDDLE_NAME, VST.POS_CNDT_LAST_NM CANDI_LAST_NAME
						 , VST.POS_CE_LIC LICENSE, VST.POS_CE_LIC_INFO LICENSE_INFO
				 FROM VW_UNIFIED_REQUESTS_RANK RR
								INNER JOIN VW_CLASSIFICATION VCL ON VCL.REQ_ID = RR.REQ_ID AND RR.PROC_TYPE='CLASSIFICATION' AND RR.REQ_RANK=1
								INNER JOIN VW_STRATCON VST ON VST.REQ_JOB_REQ_NUMBER = RR.REQ_JOB_REQ_NUMBER

				 UNION ALL

				 SELECT RR.REQ_ID, RR.REQ_JOB_REQ_NUMBER REQUEST_NUMBER, RR.REQ_JOB_REQ_CREATE_DT REQUEST_DATE
						 , RR.REQ_CANCEL_DT REQ_CANCEL_DATE, RR.REQ_CANCEL_REASON, RR.PROC_ID, RR.PROC_STATE, RR.PROC_TYPE
						 , VEL.RT_ID REQUEST_TYPE_ID, VEL.RT_DSCR REQUEST_TYPE
						 , VEL.ADMIN_CD ADMIN_CODE, VEL.ADMIN_CD_DSCR ADMIN_CODE_DESC
						 , VEL.SO_ID SO_ID, VEL.SO_NAME SO_NAME, VEL.SO_TITLE SO_TITLE, VEL.SO_ORG SO_ORG
						 , VEL.XO_ID XO_ID, VEL.XO_NAME XO_NAME, VEL.XO_TITLE XO_TITLE, VEL.XO_ORG XO_ORG
						 , VEL.HRL_ID HRL_ID, VEL.HL_NAME HRL_NAME, VEL.HRL_TITLE HRL_TITLE, VEL.HRL_ORG HRL_ORG
						 , VEL.POS_TITLE POS_TITLE, VEL.PAY_PLAN_ID PAY_PLAN_ID, VEL.PAY_PLAN_DSCR PAY_PLAN_DESC
						 , VEL.SR_ID POS_SERIES_ID, (SELECT LU_SR.TBL_LABEL FROM TBL_LOOKUP LU_SR WHERE LU_SR.TBL_ID = VEL.SR_ID AND ROWNUM = 1) AS POS_SERIES_DESC
						 , VEL.GRADE_1 POS_GRADE1, VEL.GRADE_2 POS_GRADE2, VEL.GRADE_3 POS_GRADE3, VEL.GRADE_4 POS_GRADE4, VEL.GRADE_5 POS_GRADE5
						 , VEL.CNDT_FIRST_NM CANDI_FIRST_NAME, VEL.CNDT_MIDDLE_NM CANDI_MIDDLE_NAME, VEL.CNDT_LAST_NM CANDI_LAST_NAME
						 , VEL.CE_LIC LICENSE, VEL.CE_LIC_INFO LICENSE_INFO
				 FROM VW_UNIFIED_REQUESTS_RANK RR
								INNER JOIN VW_ELIGQUAL VEL ON VEL.REQ_ID = RR.REQ_ID AND RR.PROC_TYPE='ELIGQUAL' AND RR.REQ_RANK=1
				 ) REQ
;
/


--------------------------------------------------------
--  DDL for VW_INCENTIVES_DATA
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_INCENTIVES_DATA
	AS
		SELECT FD.PROCID PROC_ID, X.REQ_NUM, to_timestamp(X.REQ_DATE, 'yyyy/mm/dd hh24:mi:ss') REQ_DATE
			, X.REQ_STATUS, X.INCEN_TYPE , X.PCA_TYPE
			-- associatedNEILRequest
			, X.NEIL_REQ_NUM,  X.NEIL_REQ_TYPE, X.ADMIN_CODE, X.ORG_NAME
			-- candidate
			, X.CANDI_NAME, X.CANDI_FIRST, X.CANDI_MIDDLE, X.CANDI_LAST
			-- selectingOfficial
			, X.SO_NAME, X.SO_EMAIL, X.SO_ID
			-- executiveOfficers
			, X.XO1_NAME, X.XO1_EMAIL, X.XO1_ID
			, X.XO2_NAME, X.XO2_EMAIL, X.XO2_ID
			, X.XO3_NAME, X.XO3_EMAIL, X.XO3_ID
			-- hrLiaisons
			, X.HRL1_NAME, X.HRL1_EMAIL, X.HRL1_ID
			, X.HRL2_NAME, X.HRL2_EMAIL, X.HRL2_ID
			, X.HRL3_NAME, X.HRL3_EMAIL, X.HRL3_ID
			-- hrSpecialist
			, X.HRS1_NAME, X.HRS1_EMAIL, X.HRS1_ID
			-- hrSpecialist2
			, X.HRS2_NAME, X.HRS2_EMAIL, X.HRS2_ID
			-- position
			, X.POS_TITLE, X.PAY_PLAN, X.SERIES, X.GRADE, X.POS_DESC_NUM
			-- dutyStation
			, X.DS1_STATE, X.DS1_CITY
			, X.DS2_STATE, X.DS2_CITY
			-- PCA Details
			, X.TYPE_OF_APPT, X.NOT_TO_EXDATE, X.WORK_SCHEDULE , X.HOURS_PER_WEEK , X.BD_CERT_REQ , X.LIC_INFO , X.REQ_ADMIN_APPROVAL
			-- licenseState
			, X.LIC_STATE1_STATE, to_date(X.LIC_STATE1_EXP_DATE, 'mm/dd/yyyy') LIC_STATE1_EXP_DATE
			, X.LIC_STATE2_STATE, to_date(X.LIC_STATE2_EXP_DATE, 'mm/dd/yyyy') LIC_STATE2_EXP_DATE
			-- boardCertSpecialty
			, X.BD_CERT_SPEC1, X.BD_CERT_SPEC2, X.BD_CERT_SPEC3, X.BD_CERT_SPEC4
			, X.BD_CERT_SPEC5, X.BD_CERT_SPEC6, X.BD_CERT_SPEC7, X.BD_CERT_SPEC8
			, X.BD_CERT_SPEC9, X.BD_CERT_SPEC_OTHER
			-- allowance
			, X.LEN_SERVED, X.LEN_SERVICE
			, X.ALW_CATEGORY, TO_NUMBER(SUBSTR(X.ALW_CATEGORY, 2), '999999999.99') ALW_CATEGORY_NUM
			, X.ALW_BD_CERT, TO_NUMBER(SUBSTR(X.ALW_BD_CERT, 2), '999999999.99') ALW_BD_CERT_NUM
			, X.ALW_MULTI_YEAR_AGMT, TO_NUMBER(SUBSTR(X.ALW_MULTI_YEAR_AGMT, 2), '999999999.99') ALW_MULTI_YEAR_AGMT_NUM
			, X.ALW_MISSION_SC, TO_NUMBER(SUBSTR(X.ALW_MISSION_SC, 2), '999999999.99') ALW_MISSION_SC_NUM
			, X.ALW_TOTAL, TO_NUMBER(SUBSTR(X.ALW_TOTAL, 2 ), '999999999.99') ALW_TOTAL_NUM
			, X.TOTAL_PAYABLE, TO_NUMBER(SUBSTR(X.TOTAL_PAYABLE, 2), '999999999.99') TOTAL_PAYABLE_NUM
		FROM TBL_FORM_DTL FD, XMLTABLE('/formData/items'
		                               PASSING FD.FIELD_DATA
		                               COLUMNS
			                               REQ_NUM  NVARCHAR2(15)   PATH './item[id="requestNumber"]/value'
			                               ,   REQ_DATE  NVARCHAR2(20)   PATH './item[id="requestDate"]/value'
			                               ,   REQ_STATUS  NVARCHAR2(20)   PATH './item[id="requestStatus"]/value'
			                               ,   INCEN_TYPE  NVARCHAR2(10)   PATH './item[id="incentiveType"]/value'
			                               ,   PCA_TYPE NVARCHAR2(10)   PATH './item[id="pcaType"]/value'
			                               -- associatedNEILRequest
			                               ,   NEIL_REQ_NUM NVARCHAR2(20)   PATH './item[id="associatedNEILRequest"]/value/requestNumber'
			                               ,   NEIL_REQ_TYPE NVARCHAR2(20)   PATH './item[id="requestType"]/value'
			                               ,   ADMIN_CODE NVARCHAR2(10)   PATH './item[id="administrativeCode"]/value'
			                               ,   ORG_NAME NVARCHAR2(100)   PATH './item[id="organizationName"]/value'
			                               -- associatedIncentives
			                               ,   ASSOC_INCEN_REQ_NUM NVARCHAR2(20)   PATH './item[id="associatedIncentives"]/value/requestNumber'
			                               ,   ASSOC_INCEN_TYPE NVARCHAR2(20)   PATH './item[id="associatedIncentives"]/value/incentiveType'
			                               -- candidate
			                               ,   CANDI_NAME NVARCHAR2(150)   PATH './item[id="candidateName"]/value'
			                               ,   CANDI_FIRST NVARCHAR2(50)   PATH './item[id="candiFirstName"]/value'
			                               ,   CANDI_MIDDLE NVARCHAR2(50)   PATH './item[id="candiMiddleName"]/value'
			                               ,   CANDI_LAST NVARCHAR2(50)   PATH './item[id="candiLastName"]/value'
			                               -- selectingOfficial
			                               ,   SO_NAME NVARCHAR2(100)   PATH './item[id="selectingOfficial"]/value/name'
			                               ,   SO_EMAIL NVARCHAR2(100)   PATH './item[id="selectingOfficial"]/value/email'
			                               ,   SO_ID NVARCHAR2(10)   PATH './item[id="selectingOfficial"]/value/id'
			                               -- executiveOfficers
			                               ,   XO1_NAME NVARCHAR2(100)   PATH './item[id="executiveOfficers"]/value[1]/name'
			                               ,   XO1_EMAIL NVARCHAR2(100)   PATH './item[id="executiveOfficers"]/value[1]/email'
			                               ,   XO1_ID NVARCHAR2(10)   PATH './item[id="executiveOfficers"]/value[1]/id'
			                               ,   XO2_NAME NVARCHAR2(100)   PATH './item[id="executiveOfficers"]/value[2]/name'
			                               ,   XO2_EMAIL NVARCHAR2(100)   PATH './item[id="executiveOfficers"]/value[2]/email'
			                               ,   XO2_ID NVARCHAR2(10)   PATH './item[id="executiveOfficers"]/value[2]/id'
			                               ,   XO3_NAME NVARCHAR2(100)   PATH './item[id="executiveOfficers"]/value[3]/name'
			                               ,   XO3_EMAIL NVARCHAR2(100)   PATH './item[id="executiveOfficers"]/value[3]/email'
			                               ,   XO3_ID NVARCHAR2(10)   PATH './item[id="executiveOfficers"]/value[3]/id'
			                               -- hrLiaisons
			                               ,   HRL1_NAME NVARCHAR2(100)   PATH './item[id="hrLiaisons"]/value[1]/name'
			                               ,   HRL1_EMAIL NVARCHAR2(100)   PATH './item[id="hrLiaisons"]/value[1]/email'
			                               ,   HRL1_ID NVARCHAR2(10)   PATH './item[id="hrLiaisons"]/value[1]/id'
			                               ,   HRL2_NAME NVARCHAR2(100)   PATH './item[id="hrLiaisons"]/value[2]/name'
			                               ,   HRL2_EMAIL NVARCHAR2(100)   PATH './item[id="hrLiaisons"]/value[2]/email'
			                               ,   HRL2_ID NVARCHAR2(10)   PATH './item[id="hrLiaisons"]/value[2]/id'
			                               ,   HRL3_NAME NVARCHAR2(100)   PATH './item[id="hrLiaisons"]/value[3]/name'
			                               ,   HRL3_EMAIL NVARCHAR2(100)   PATH './item[id="hrLiaisons"]/value[3]/email'
			                               ,   HRL3_ID NVARCHAR2(10)   PATH './item[id="hrLiaisons"]/value[3]/id'
			                               -- hrSpecialist
			                               ,   HRS1_NAME NVARCHAR2(100)   PATH './item[id="hrSpecialist"]/value/name'
			                               ,   HRS1_EMAIL NVARCHAR2(100)   PATH './item[id="hrSpecialist"]/value/email'
			                               ,   HRS1_ID NVARCHAR2(10)   PATH './item[id="hrSpecialist"]/value/id'
			                               -- hrSpecialist2
			                               ,   HRS2_NAME NVARCHAR2(100)   PATH './item[id="hrSpecialist2"]/value/name'
			                               ,   HRS2_EMAIL NVARCHAR2(100)   PATH './item[id="hrSpecialist2"]/value/email'
			                               ,   HRS2_ID NVARCHAR2(10)   PATH './item[id="hrSpecialist2"]/value/id'
			                               -- position
			                               ,   POS_TITLE NVARCHAR2(140)   PATH './item[id="positionTitle"]/value'
			                               ,   PAY_PLAN NVARCHAR2(5)   PATH './item[id="payPlan"]/value'
			                               ,   SERIES NVARCHAR2(140)   PATH './item[id="series"]/value'
			                               ,   GRADE NVARCHAR2(5)   PATH './item[id="grade"]/value'
			                               ,   POS_DESC_NUM NVARCHAR2(20)   PATH './item[id="posDescNumber"]/value'
			                               -- dutyStation
			                               ,   DS1_STATE NVARCHAR2(2)   PATH './item[id="dutyStation"]/value[1]/state'
			                               ,   DS1_CITY NVARCHAR2(50)   PATH './item[id="dutyStation"]/value[1]/city'
			                               ,   DS2_STATE NVARCHAR2(2)   PATH './item[id="dutyStation"]/value[2]/state'
			                               ,   DS2_CITY NVARCHAR2(50)   PATH './item[id="dutyStation"]/value[2]/city'
			                               -- PCA Details
			                               ,   TYPE_OF_APPT NVARCHAR2(20)   PATH './item[id="typeOfAppointment"]/value'
			                               ,   NOT_TO_EXDATE NVARCHAR2(50)   PATH './item[id="notToExceedDate"]/value'
			                               ,   WORK_SCHEDULE NVARCHAR2(15)   PATH './item[id="workSchedule"]/value'
			                               ,   HOURS_PER_WEEK NVARCHAR2(5)   PATH './item[id="hoursPerWeek"]/value'
			                               ,   BD_CERT_REQ NVARCHAR2(5)   PATH './item[id="requireBoardCert"]/value'
			                               ,   LIC_INFO NVARCHAR2(140)   PATH './item[id="licenseInfo"]/value'
			                               ,   REQ_ADMIN_APPROVAL NVARCHAR2(5)   PATH './item[id="requireAdminApproval"]/value'
			                               -- licenseState
			                               ,   LIC_STATE1_STATE NVARCHAR2(2)   PATH './item[id="licenseState"]/value[1]/state'
			                               ,   LIC_STATE1_EXP_DATE NVARCHAR2(10)   PATH './item[id="licenseState"]/value[1]/expDate'
			                               ,   LIC_STATE2_STATE NVARCHAR2(2)   PATH './item[id="licenseState"]/value[2]/state'
			                               ,   LIC_STATE2_EXP_DATE NVARCHAR2(10)   PATH './item[id="licenseState"]/value[2]/expDate'
			                               -- boardCertSpecialty
			                               ,   BD_CERT_SPEC1 NVARCHAR2(30)   PATH './item[contains(id, "boardCertSpecialty")][1]/text'
			                               ,   BD_CERT_SPEC2 NVARCHAR2(30)   PATH './item[contains(id, "boardCertSpecialty")][2]/text'
			                               ,   BD_CERT_SPEC3 NVARCHAR2(30)   PATH './item[contains(id, "boardCertSpecialty")][3]/text'
			                               ,   BD_CERT_SPEC4 NVARCHAR2(30)   PATH './item[contains(id, "boardCertSpecialty")][4]/text'
			                               ,   BD_CERT_SPEC5 NVARCHAR2(20)   PATH './item[contains(id, "boardCertSpecialty")][5]/text'
			                               ,   BD_CERT_SPEC6 NVARCHAR2(30)   PATH './item[contains(id, "boardCertSpecialty")][6]/text'
			                               ,   BD_CERT_SPEC7 NVARCHAR2(30)   PATH './item[contains(id, "boardCertSpecialty")][7]/text'
			                               ,   BD_CERT_SPEC8 NVARCHAR2(30)   PATH './item[contains(id, "boardCertSpecialty")][8]/text'
			                               ,   BD_CERT_SPEC9 NVARCHAR2(30)   PATH './item[contains(id, "boardCertSpecialty")][9]/text'
			                               ,   BD_CERT_SPEC_OTHER NVARCHAR2(140)   PATH './item[id="otherSpeciality"]/value'
			                               -- allowance
			                               ,   LEN_SERVED NVARCHAR2(25)   PATH './item[id="lengthOfServed"]/value'
			                               ,   LEN_SERVICE NVARCHAR2(2)   PATH './item[id="lengthOfService"]/value'
			                               ,   ALW_CATEGORY NVARCHAR2(15)   PATH './item[id="allowanceCategory"]/value'
			                               ,   ALW_BD_CERT NVARCHAR2(15)   PATH './item[id="allowanceBoardCertification"]/value'
			                               ,   ALW_MULTI_YEAR_AGMT NVARCHAR2(15)   PATH './item[id="allowanceMultiYearAgreement"]/value'
			                               ,   ALW_MISSION_SC NVARCHAR2(15)   PATH './item[id="allowanceMissionSpecificCriteria"]/value'
			                               ,   ALW_TOTAL NVARCHAR2(15)   PATH './item[id="allowanceTotal"]/value'
			                               ,   TOTAL_PAYABLE NVARCHAR2(15)   PATH './item[id="totalPayablePCACalculation"]/value'
			) X
		WHERE FD.FORM_TYPE='CMSINCENTIVES'
;
/

